<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BuptStEve&#39;s Blog</title>
  <subtitle>Talk is cheap show me the offer!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://buptsteve.github.io/blog/"/>
  <updated>2017-01-20T08:00:00.000Z</updated>
  <id>https://buptsteve.github.io/blog/</id>
  
  <author>
    <name>Steve Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「8」Redux 进阶 - react 全家桶学习笔记（二）</title>
    <link href="https://buptsteve.github.io/blog/2017/01/02/8.advanced-redux/"/>
    <id>https://buptsteve.github.io/blog/2017/01/02/8.advanced-redux/</id>
    <published>2017-01-01T16:48:29.000Z</published>
    <updated>2017-01-20T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p>在上一篇中介绍了 Redux 的各项基础 api。接着一步一步地介绍如何与 React 进行结合，并从引入过程中遇到的各个痛点引出 react-redux 的作用和原理。</p>
<p>不过目前为止还都是纸上谈兵，在日常的开发中最常见异步操作（如通过 ajax、jsonp 等方法 获取数据），在学习完上一篇后你可能依然没有头绪。因此本文将深入浅出地对于 redux 的进阶用法进行介绍。</p>
<h2 id="一、中间件（MiddleWare）"><a href="#一、中间件（MiddleWare）" class="headerlink" title="一、中间件（MiddleWare）"></a>一、中间件（MiddleWare）</h2><blockquote>
<p>It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.  ————  by Dan Abramov</p>
</blockquote>
<p>这是 redux 作者对 middleware 的描述，middleware 提供了一个分类处理 action 的机会，在 middleware 中你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会。</p>
<p><strong>说得好像很吊…不过有啥用咧…？</strong></p>
<h3 id="1-1-日志应用场景-2"><a href="#1-1-日志应用场景-2" class="headerlink" title="1.1. 日志应用场景[2]"></a>1.1. 日志应用场景<a href="http://cn.redux.js.org/docs/advanced/Middleware.html" title="Redux 中文文档" target="_blank" rel="external">[<a href="http://cn.redux.js.org/docs/advanced/Middleware.html" title="Redux 中文文档" target="_blank" rel="external">2</a></a>]</h3><p>因为改变 store 的唯一方法就是 dispatch 一个 action，所以有时需要将每次 dispatch 操作都打印出来作为操作日志，这样一来就可以很容易地看出是哪一次 dispatch 导致了异常。</p>
<h3 id="1-1-第一次尝试：强行怼…"><a href="#1-1-第一次尝试：强行怼…" class="headerlink" title="1.1. 第一次尝试：强行怼…"></a>1.1. 第一次尝试：强行怼…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Use Redux'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">store.dispatch(action);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div></pre></td></tr></table></figure>
<p>显然这种在每一个 dispatch 操作的前后都手动加代码的方法，简直让人不忍直视…</p>
<h3 id="1-2-第二次尝试：封装-dispatch"><a href="#1-2-第二次尝试：封装-dispatch" class="headerlink" title="1.2. 第二次尝试：封装 dispatch"></a>1.2. 第二次尝试：封装 dispatch</h3><p>聪明的你一定马上想到了，不如将上述代码封装成一个函数，然后直接调用该方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAndLog</span>(<span class="params">store, action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">    store.dispatch(action);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line">&#125;</div><div class="line"></div><div class="line">dispatchAndLog(store, addTodo(<span class="string">'Use Redux'</span>));</div></pre></td></tr></table></figure>
<p>矮油，看起来不错哟。</p>
<p>不过每次使用都需要导入这个额外的方法，一旦不想使用又要全部替换回去，好麻烦啊…</p>
<h3 id="1-3-第三次尝试：猴子补丁（Monkey-Patch）"><a href="#1-3-第三次尝试：猴子补丁（Monkey-Patch）" class="headerlink" title="1.3. 第三次尝试：猴子补丁（Monkey Patch）"></a>1.3. 第三次尝试：猴子补丁（Monkey Patch）</h3><p>在此暂不探究为啥叫猴子补丁而不是什么其他补丁。</p>
<p>简单来说猴子补丁指的就是：以替换原函数的方式为其添加新特性或修复 bug。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> next = store.dispatch; <span class="comment">// 暂存原方法</span></div><div class="line"></div><div class="line">store.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatchAndLog</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">    <span class="keyword">let</span> result = next(action); <span class="comment">// 应用原方法</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样一来我们就“偷梁换柱”般的为原 dispatch 添加了输出日志的功能。</p>
<h3 id="1-4-第四次尝试：隐藏猴子补丁"><a href="#1-4-第四次尝试：隐藏猴子补丁" class="headerlink" title="1.4. 第四次尝试：隐藏猴子补丁"></a>1.4. 第四次尝试：隐藏猴子补丁</h3><p>目前看起来很不错，然鹅假设我们又要添加别的一个中间件，那么代码中将会有重复的 <code>let next = store.dispatch;</code> 代码。</p>
<p>对于这个问题我们可以通过参数传递，返回新的 dispatch 来解决。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> next = store.dispatch;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchAndLog</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">        <span class="keyword">const</span> result = next(action); <span class="comment">// 应用原方法</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">store.dispatch = logger(store);</div><div class="line">store.dispatch = anotherMiddleWare(store);</div></pre></td></tr></table></figure>
<p>注意到最后应用中间件的代码其实就是一个链式的过程，所以还可以更进一步优化绑定中间件的过程。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddlewareByMonkeypatching</span>(<span class="params">store, middlewares</span>) </span>&#123;</div><div class="line">    <span class="comment">// 因为传入的是原对象引用的值，slice 方法会生成一份拷贝，</span></div><div class="line">    <span class="comment">// 所以之后调用的 reverse 方法不会改变原数组</span></div><div class="line">    middlewares = middlewares.slice();</div><div class="line">    <span class="comment">// 我们希望按照数组原本的先后顺序触发各个中间件，</span></div><div class="line">    <span class="comment">// 所以最后的中间件应当最接近原本的 dispatch，</span></div><div class="line">    <span class="comment">// 就像洋葱一样一层一层地包裹原 dispatch</span></div><div class="line">    middlewares.reverse();</div><div class="line"></div><div class="line">    <span class="comment">// 在每一个 middleware 中变换 store.dispatch 方法。</span></div><div class="line">    middlewares.forEach(<span class="function">(<span class="params">middleware</span>) =&gt;</span></div><div class="line">        store.dispatch = middleware(store);</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 先触发 logger，再触发 anotherMiddleWare 中间件（类似于 koa 的中间件机制）</span></div><div class="line">applyMiddlewareByMonkeypatching(store, [ logger, anotherMiddleWare ]);</div></pre></td></tr></table></figure>
<p>so far so good~! 现在不仅隐藏了显式地缓存原 dispatch 的代码，而且调用起来也很优雅~，然鹅这样就够了么？</p>
<h3 id="1-5-第五次尝试：移除猴子补丁"><a href="#1-5-第五次尝试：移除猴子补丁" class="headerlink" title="1.5. 第五次尝试：移除猴子补丁"></a>1.5. 第五次尝试：移除猴子补丁</h3><p>注意到，以上写法仍然是通过 <code>store.dispatch = middleware(store);</code> 改写原方法，并在中间件内部通过 <code>const next = store.dispatch;</code> 读取当前最新的方法。</p>
<p>本质上其实还是 monkey patch，只不过将其封装在了内部，不过若是将 dispatch 方法通过参数传递进来，这样在 applyMiddleware 函数中就可以暂存 store.dispatch（而不是一次又一次的改写），岂不美哉？</p>
<p><img src="/blog/imgs/redux/岂不美哉.jpg" alt="岂不美哉"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过参数传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchAndLog</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">store, middlewares</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// 暂存原方法</span></div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch;</div><div class="line"></div><div class="line">    <span class="comment">// middleware 中通过闭包获取 dispatch，并且更新 dispatch</span></div><div class="line">    middlewares.forEach(<span class="function">(<span class="params">middleware</span>) =&gt;</span></div><div class="line">        dispatch = middleware(store, dispatch);</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着应用函数式编程的 curry 化（一种使用匿名单参数函数来实现多参数函数的方法。），还可以再进一步优化。（其实是为了使用 compose 将中间件函数先组合再绑定）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">            <span class="keyword">const</span> result = next(action); <span class="comment">// 应用原方法</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// -- 使用 es6 的箭头函数可以让代码更加优雅更函数式... --</span></div><div class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">store</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">    <span class="keyword">const</span> result = next(action); <span class="comment">// 应用原方法</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">store, middlewares</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch;</div><div class="line"></div><div class="line">    middlewares.forEach(<span class="function">(<span class="params">middleware</span>) =&gt;</span></div><div class="line">        dispatch = middleware(store)(dispatch); <span class="comment">// 注意调用了两次</span></div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上方法离 Redux 中最终的 applyMiddleware 实现已经很接近了，</p>
<h3 id="1-6-第六次尝试：组合（compose，函数式方法）"><a href="#1-6-第六次尝试：组合（compose，函数式方法）" class="headerlink" title="1.6. 第六次尝试：组合（compose，函数式方法）"></a>1.6. 第六次尝试：组合（compose，函数式方法）</h3><p>在 Redux 的最终实现中，并没有采用我们之前的 <code>slice + reverse</code> 的方法来倒着绑定中间件。而是采用了 <code>map + compose + reduce</code> 的方法。</p>
<p>先来说这个 compose 函数，在数学中以下等式十分的自然。</p>
<blockquote>
<p>f(g(x)) = (f o g)(x)<br>f(g(h(x))) = (f o g o h)(x)</p>
</blockquote>
<p>用代码来表示这一过程就是这样。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传入参数为函数数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回一个闭包，</span></div><div class="line">    <span class="comment">// 将右边的函数作为内层函数执行，并将执行结果作为外层函数再次执行</span></div><div class="line">    <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不了解 reduce 函数的人可能对于以上代码会感到有些费解，举个栗子来说，有函数数组 [f, g, h]传入 compose 函数执行。</p>
<ul>
<li>首次 reduce 执行的结果是返回一个函数 <code>(...args) =&gt; f(g(...args))</code></li>
<li>接着该函数作为下一次 reduce 函数执行时的参数 <code>a</code>，而参数 b 是 <code>h</code></li>
<li>再次执行时 <code>h(...args)</code> 作为参数传入 a，即最后返回的还是一个函数 <code>(...args) =&gt; f(g(h(...args)))</code></li>
</ul>
<p>因此最终版 applyMiddleware 实现中并非依次执行绑定，而是采用函数式的思维，将作用于 dispatch 的函数首先进行组合，再进行绑定。（所以要中间件要 curry 化）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传入中间件函数的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</div><div class="line">  <span class="comment">// 返回一个函数的原因在 createStore 部分再进行介绍</span></div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> store = createStore(reducer, preloadedState, enhancer)</div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch</div><div class="line">    <span class="keyword">let</span> chain = [] <span class="comment">// 保存绑定了 middlewareAPI 后的函数数组</span></div><div class="line"></div><div class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</div><div class="line">      <span class="attr">getState</span>: store.getState,</div><div class="line">      <span class="attr">dispatch</span>: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</div><div class="line">    &#125;</div><div class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</div><div class="line">    <span class="comment">// 使用 compose 函数按照从右向左的顺序绑定（执行顺序是从左往右）</span></div><div class="line">    dispatch = compose(...chain)(store.dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...store,</div><div class="line">      dispatch</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// store -&gt; &#123; getState &#125; 从传递整个 store 改为传递部分 api</span></div><div class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">&#123; getState &#125;</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">    <span class="keyword">const</span> result = next(action); <span class="comment">// 应用原方法</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'next state'</span>, getState());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>综上如下图所示整个中间件的执行顺序是类似于洋葱一样首先按照从外到内的顺序执行 dispatch 之前的中间件代码，在 dispatch（洋葱的心）执行后又反过来，按照从内到左外的顺序执行 dispatch 之后的中间件代码。</p>
<p><img src="/blog/imgs/redux/middleware.png" alt="中间件"></p>
<blockquote>
<p><strong>桥都麻袋！</strong></p>
</blockquote>
<p><img src="/blog/imgs/redux/桥都麻袋.jpg" alt="桥都麻袋"></p>
<p><strong>你真的都理解了么？</strong></p>
<ul>
<li>在之前的实现中直接传递 store，为啥在最终实现中传递的是 middlewareAPI？</li>
<li>middlewareAPI 里的 dispatch 是为啥一个匿名函数而不直接传递 dispatch？</li>
<li>如下列代码所示，如果在中间件里不用 next 而是调用 store.dispatch 会怎样呢？</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">store</span>) =&gt;</span> (next) =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">    <span class="comment">// 调用原始 dispatch，而不是上一个中间件传进来的</span></div><div class="line">    <span class="keyword">const</span> result = store.dispatch(action); <span class="comment">// &lt;- 这里</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="1-7-middleware-中调用-store-dispatch-6"><a href="#1-7-middleware-中调用-store-dispatch-6" class="headerlink" title="1.7. middleware 中调用 store.dispatch[6]"></a>1.7. middleware 中调用 store.dispatch[<a href="https://zhuanlan.zhihu.com/p/20597452" title="redux middleware 详解" target="_blank" rel="external">6</a>]</h3><p><img src="/blog/imgs/redux/using-origin-dispatch.png" alt="中间件使用 store.dispatch"></p>
<p>正常情况下，如图左，当我们 dispatch 一个 action 时，middleware 通过 next(action) 一层一层处理和传递 action 直到 redux 原生的 dispatch。如果某个 middleware 使用 store.dispatch(action) 来分发 action，就发生了右图的情况，相当于从外层重新来一遍，假如这个 middleware 一直简单粗暴地调用 store.dispatch(action)，就会形成无限循环了。（其实就相当于猴子补丁没补上，不停地调用原来的函数）</p>
<p>因此最终版里不是直接传递 store，而是传递 getState 和 dispatch，传递 getState 的原因是可以通过 getState 获取当前状态。并且还将 dispatch 用一个匿名函数包裹 <code>dispatch: (action) =&gt; dispatch(action)</code>，这样不但可以防止 dispatch 被中间件修改，而且只要 dispatch 更新了，middlewareAPI 中的 dispatch 也会随之发生变化。</p>
<h3 id="1-8-createStore-进阶"><a href="#1-8-createStore-进阶" class="headerlink" title="1.8. createStore 进阶"></a>1.8. createStore 进阶</h3><p>在上一篇中我们使用 createStore 方法只用到了它前两个参数，即 reducer 和 preloadedState，然鹅其实它还拥有第三个参数 enhancer。</p>
<p>enhancer 参数可以实现中间件、时间旅行、持久化等功能，Redux 仅提供了 applyMiddleware 用于应用中间件（就是 1.6. 中的那个）。</p>
<p>在日常使用中，要应用中间件可以这么写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    createStore,</div><div class="line">    combineReducers,</div><div class="line">    applyMiddleware,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 组合 reducer</span></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">todos</span>: todosReducer,</div><div class="line">    <span class="attr">filter</span>: filterReducer,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 中间件数组</span></div><div class="line"><span class="keyword">const</span> middlewares = [logger, anotherMiddleWare];</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">    rootReducer,</div><div class="line">    initialState,</div><div class="line">    applyMiddleware(...middlewares),</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 如果不需要 initialState 的话也可以忽略</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">    rootReducer,</div><div class="line">    applyMiddleware(...middlewares),</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在上文 applyMiddleware 的实现中留了个悬念，就是为什么返回的是一个函数，因为 enhancer 被定义为一个高阶函数，接收 createStore 函数作为参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建一个 redux store 用于保存状态树，</div><div class="line"> * 唯一改变 store 中数据的方法就是对其调用 dispatch</div><div class="line"> *</div><div class="line"> * 在你的应用中应该只有一个 store，想要针对不同的部分状态响应 action，</div><div class="line"> * 你应该使用 combineReducers 将多个 reducer 合并。</div><div class="line"> *</div><div class="line"> * @param  &#123;函数&#125;  reducer 不多解释了</div><div class="line"> * @param  &#123;对象&#125;  preloadedState 主要用于前后端同构时的数据同步</div><div class="line"> * @param  &#123;函数&#125;  enhancer 很牛逼，可以实现中间件、时间旅行，持久化等</div><div class="line"> * ※ Redux 仅提供 applyMiddleware 这个 Store Enhancer ※</div><div class="line"> * @return &#123;Store&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</div><div class="line">    enhancer = preloadedState</div><div class="line">    preloadedState = <span class="literal">undefined</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// enhancer 是一个高阶函数，接收 createStore 函数作为参数</span></div><div class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// 后续内容推荐看看参考资料部分的【Redux 莞式教程】</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总的来说 Redux 有五个 API，分别是：</p>
<ul>
<li>createStore(reducer, [initialState], enhancer)</li>
<li>combineReducers(reducers)</li>
<li>applyMiddleware(…middlewares)</li>
<li>bindActionCreators(actionCreators, dispatch)</li>
<li>compose(…functions)</li>
</ul>
<p>createStore 生成的 store 有四个 API，分别是：</p>
<ul>
<li>getState()</li>
<li>dispatch(action)</li>
<li>subscribe(listener)</li>
<li>replaceReducer(nextReducer)</li>
</ul>
<p>以上 API 我们还没介绍的应该就剩 bindActionCreators 了。这个 API 其实就是个语法糖起了方便地给 action creator 绑定 dispatch 的作用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一般写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">onPlusClick</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(increment()),</div><div class="line">        <span class="attr">onMinusClick</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(decrement()),</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用 bindActionCreators</span></div><div class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> bindActionCreators(&#123;</div><div class="line">        <span class="attr">onPlusClick</span>: increment,</div><div class="line">        <span class="attr">onMinusClick</span>: decrement,</div><div class="line">        <span class="comment">// 还可以绑定更多函数...</span></div><div class="line">    &#125;, dispatch);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 甚至如果定义的函数输入都相同的话还能更加简洁</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">  mapStateToProps,</div><div class="line">  <span class="comment">// 直接传一个对象，connect 自动帮你绑定 dispatch</span></div><div class="line">  &#123; <span class="attr">onPlusClick</span>: increment, <span class="attr">onMinusClick</span>: decrement &#125;,</div><div class="line">)(App);</div></pre></td></tr></table></figure>
<h2 id="二、异步操作"><a href="#二、异步操作" class="headerlink" title="二、异步操作"></a>二、异步操作</h2><p>下面让我们告别干净的同步世界，进入“肮脏”的异步世界~。</p>
<blockquote>
<p>在函数式编程中，异步操作、修改全局变量等与函数外部环境发生的交互叫做副作用（Side Effect）<br>通常认为这些操作是邪恶（evil）肮脏（dirty）的，并且也是导致 bug 的源头。<br>因为与之相对的是纯函数（pure function），即对于同样的输入总是返回同样的输出的函数，使用这样的函数很容易做组合、测试等操作，很容易验证和保证其正确性。（它们就像数学公式一般准确）</p>
</blockquote>
<h3 id="2-1-通知应用场景-3"><a href="#2-1-通知应用场景-3" class="headerlink" title="2.1. 通知应用场景[3]"></a>2.1. 通知应用场景[<a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559" title="Dan Abramov - how to dispatch a redux action with a timeout" target="_blank" rel="external">3</a>]</h3><p>现在有这么一个显示通知的应用场景，在通知显示后5秒钟隐藏该通知。</p>
<p>首先当然是编写 action</p>
<ul>
<li>显示：SHOW_NOTIFICATION</li>
<li>隐藏：HIDE_NOTIFICATION</li>
</ul>
<h4 id="2-1-1-最直观的写法"><a href="#2-1-1-最直观的写法" class="headerlink" title="2.1.1. 最直观的写法"></a>2.1.1. 最直观的写法</h4><p>最直观的写法就是首先显示通知，然后使用 setTimeout 在5秒后隐藏通知。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'SHOW_NOTIFICATION'</span>, <span class="attr">text</span>: <span class="string">'You logged in.'</span> &#125;);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'HIDE_NOTIFICATION'</span> &#125;);</div><div class="line">&#125;, <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<p>然鹅，一般在组件中尤其是展示组件中没法也没必要获取 store，因此一般将其包装成 action creator。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// actions.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showNotification</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">'SHOW_NOTIFICATION'</span>, text &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hideNotification</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">'HIDE_NOTIFICATION'</span> &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// component.js</span></div><div class="line"><span class="keyword">import</span> &#123; showNotification, hideNotification &#125; <span class="keyword">from</span> <span class="string">'../actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.props.dispatch(showNotification(<span class="string">'You just logged in.'</span>));</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">this</span>.props.dispatch(hideNotification());</div><div class="line">&#125;, <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<p>或者更进一步地先使用 connect 方法包装。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.showNotification(<span class="string">'You just logged in.'</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">this</span>.props.hideNotification();</div><div class="line">&#125;, <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<p>到目前为止，我们没有用任何 middleware 或者别的概念。</p>
<h4 id="2-1-2-异步-action-creator"><a href="#2-1-2-异步-action-creator" class="headerlink" title="2.1.2. 异步 action creator"></a>2.1.2. 异步 action creator</h4><p>上一种直观写法有一些问题</p>
<ul>
<li>每当我们需要显示一个通知就需要手动先显示，然后再手动地让其消失。其实我们更希望通知到时间后自动地消失。</li>
<li>通知目前没有自己的 id，所以有些场景下存在竞争条件（race condition），即假如在第一个通知结束前触发第二个通知，当第一个通知结束时，第二个通知也会被提前关闭。</li>
</ul>
<p>所以为了解决以上问题，我们可以为通知加上 id，并将显示和消失的代码包起来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// actions.js</span></div><div class="line"><span class="keyword">const</span> showNotification = <span class="function">(<span class="params">text, id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'SHOW_NOTIFICATION'</span>,</div><div class="line">    id,</div><div class="line">    text,</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> hideNotification = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'HIDE_NOTIFICATION'</span>,</div><div class="line">    id,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">let</span> nextNotificationId = <span class="number">0</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showNotificationWithTimeout</span>(<span class="params">dispatch, text</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> id = nextNotificationId++;</div><div class="line">    dispatch(showNotification(id, text));</div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        dispatch(hideNotification(id));</div><div class="line">    &#125;, <span class="number">5000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// component.js</span></div><div class="line">showNotificationWithTimeout(<span class="keyword">this</span>.props.dispatch, <span class="string">'You just logged in.'</span>);</div><div class="line"></div><div class="line"><span class="comment">// otherComponent.js</span></div><div class="line">showNotificationWithTimeout(<span class="keyword">this</span>.props.dispatch, <span class="string">'You just logged out.'</span>);</div></pre></td></tr></table></figure>
<p><strong>为啥 <code>showNotificationWithTimeout</code> 函数要接收 <code>dispatch</code> 作为第一个参数呢？</strong><br>虽然通常一个组件都拥有触发 dispatch 的权限，但是现在我们想让一个外部函数（showNotificationWithTimeout）来触发 dispatch，所以需要将 dispatch 作为参数传入。</p>
<h4 id="2-1-3-单例-store"><a href="#2-1-3-单例-store" class="headerlink" title="2.1.3. 单例 store"></a>2.1.3. 单例 store</h4><p>可能你会说如果有一个从其他模块中导出的单例 store，那么是不是同样也可以不传递 dispatch 以上代码也可以这样写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">// actions.js</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> nextNotificationId = <span class="number">0</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showNotificationWithTimeout</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> id = nextNotificationId++;</div><div class="line">  store.dispatch(showNotification(id, text));</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    store.dispatch(hideNotification(id));</div><div class="line">  &#125;, <span class="number">5000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// component.js</span></div><div class="line">showNotificationWithTimeout(<span class="string">'You just logged in.'</span>);</div><div class="line"></div><div class="line"><span class="comment">// otherComponent.js</span></div><div class="line">showNotificationWithTimeout(<span class="string">'You just logged out.'</span>);</div></pre></td></tr></table></figure>
<p>这样看起来似乎更简单一些，不过墙裂不推荐这样的写法。主要的原因是这样的写法强制让 store 成为一个单例。这样一来要实现<a href="http://cn.redux.js.org/docs/recipes/ServerRendering.html" target="_blank" rel="external">服务器端渲染（Server Rendering）</a>将十分困难。因为在服务端，为了让不同的用户得到不同的预先获取的数据，你需要让每一个请求都有自己的 store。</p>
<p>并且单例 store 也将让测试变得困难。当测试 action creator 时你将无法自己模拟一个 store，因为它们都引用了从外部导入的那个特定的 store，所以你甚至无法从外部重置状态。</p>
<h4 id="2-1-4-redux-thunk-中间件"><a href="#2-1-4-redux-thunk-中间件" class="headerlink" title="2.1.4. redux-thunk 中间件"></a>2.1.4. redux-thunk 中间件</h4><p>首先声明 <a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk</a> 这种方案对于小型的应用来说足够日常使用，然鹅对于大型应用来说，你可能会发现一些不方便的地方。（例如对于 action 需要组合、取消、竞争等复杂操作的场景）</p>
<p>首先来明确什么是 thunk…</p>
<blockquote>
<p>A thunk is a function that wraps an expression to delay its evaluation.</p>
</blockquote>
<p>简单来说 thunk 就是封装了表达式的函数，目的是延迟执行该表达式。不过有啥应用场景呢？</p>
<p>目前为止，在上文中的 2.1.2. 异步 action creator 部分，最后得出的方案有以下明显的缺点</p>
<ul>
<li>我们必须将 dispatch 作为参数传入。</li>
<li>这样一来任何使用了异步操作的组件都必须用 props 传递 dispatch（不管有多深…）。我们也没法像之前各种同步操作一样使用 connect 函数来绑定回调函数，因为 showNotificationWithTimeout 函数返回的不是一个 action。</li>
<li>此外，在日常使用时，我们还需要区分哪些函数是同步的 action creator，那些是异步的 action creator。（异步的需要传 dispatch…）<ul>
<li>同步的情况: store.dispatch(actionCreator(payload))</li>
<li>异步的情况: asyncActionCreator(store.dispatch, payload)</li>
</ul>
</li>
</ul>
<blockquote>
<p>计将安出？</p>
</blockquote>
<p>其实问题的本质在于 Redux “有眼不识 function”，目前为止 dispatch 函数接收的参数只能是 action creator 返回的普通的 action。<del>所以如果我们让 dispatch 对于 function 网开一面，走走后门潜规则一下不就行啦</del>~</p>
<p>实现方式很简单，想想第一节介绍的为 dispatch 添加日志功能的过程。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// redux-thunk 源码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</div><div class="line">thunk.withExtraArgument = createThunkMiddleware;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</div></pre></td></tr></table></figure>
<p>以上就是 redux-thunk 的源码，就是这么简单，判断下如果传入的 action 是函数的话，就执行这个函数…（withExtraArgument 是为了添加额外的参数，详情见 redux-thunk 的 README.md）</p>
<ul>
<li>这样一来如果我们 dispatch 了一个函数，redux-thunk 会传给它一个 dispatch 参数，我们就利用 thunk 解决了组件中不方便获取 dispatch 的问题。</li>
<li>并且由于 redux-thunk 拦截了函数，也可以防止 reducer 接收到函数而出现异常。</li>
</ul>
<p>添加了 redux-thunk 中间件后代码可以这么写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// actions.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> nextNotificationId = <span class="number">0</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showNotificationWithTimeout</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回一个函数</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> id = nextNotificationId++;</div><div class="line">        dispatch(showNotification(id, text));</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            dispatch(hideNotification(id));</div><div class="line">        &#125;, <span class="number">5000</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// component.js 像同步函数一样的写法</span></div><div class="line"><span class="keyword">this</span>.props.dispatch(showNotificationWithTimeout(<span class="string">'You just logged in.'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 或者 connect 后直接调用</span></div><div class="line"><span class="keyword">this</span>.props.showNotificationWithTimeout(<span class="string">'You just logged in.'</span>);</div></pre></td></tr></table></figure>
<h3 id="2-2-接口应用场景"><a href="#2-2-接口应用场景" class="headerlink" title="2.2. 接口应用场景"></a>2.2. 接口应用场景</h3><p>目前我们对于简单的延时异步操作的处理已经了然于胸了，现在让我们来考虑一下通过 ajax 或 jsonp 等接口来获取数据的异步场景。</p>
<p>很自然的，我们会发起一个请求，然后等待请求的响应（请求可能成功或是失败）。</p>
<p>即有基本的三种状态和与之对应的 action：</p>
<ul>
<li>请求开始的 action：isFetching 为真，UI 显示加载界面<br><code>{ type: &#39;FETCH_POSTS_REQUEST&#39; }</code></li>
<li>请求成功的 action：isFetching 为假，隐藏加载界面并显示接收到的数据<br><code>{ type: &#39;FETCH_POSTS_SUCCESS&#39;, response: { ... } }</code></li>
<li>请求失败的 action：isFetching 为假，隐藏加载界面，可能保存失败信息并在 UI 中显示出来<br><code>{ type: &#39;FETCH_POSTS_FAILURE&#39;, error: &#39;Oops&#39; }</code></li>
</ul>
<p>按照这个思路，举一个简单的栗子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">const</span> FETCH_POSTS_REQUEST = <span class="string">'FETCH_POSTS_REQUEST'</span>;</div><div class="line"><span class="keyword">const</span> FETCH_POSTS_SUCCESS = <span class="string">'FETCH_POSTS_SUCCESS'</span>;</div><div class="line"><span class="keyword">const</span> FETCH_POSTS_FAILURE = <span class="string">'FETCH_POSTS_FAILURE'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Actions</span></div><div class="line"><span class="keyword">const</span> requestPosts = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS_REQUEST,</div><div class="line">    <span class="attr">payload</span>: id,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> receivePosts = <span class="function">(<span class="params">res</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS_SUCCESS,</div><div class="line">    <span class="attr">payload</span>: res,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> catchPosts = <span class="function">(<span class="params">err</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS_FAILURE,</div><div class="line">    <span class="attr">payload</span>: err,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> fetchPosts = <span class="function">(<span class="params">id</span>) =&gt;</span> (dispatch, getState) =&gt; &#123;</div><div class="line">    dispatch(requestPosts(id));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> api.getData(id)</div><div class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> dispatch(receivePosts(res)))</div><div class="line">        .catch(<span class="function"><span class="params">error</span> =&gt;</span> dispatch(catchPosts(error)));</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// reducer</span></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">oldState, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> FETCH_POSTS_REQUEST:</div><div class="line">            <span class="keyword">return</span> requestState;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> FETCH_POSTS_SUCCESS:</div><div class="line">            <span class="keyword">return</span> successState;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> FETCH_POSTS_FAILURE:</div><div class="line">            <span class="keyword">return</span> errorState;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> oldState;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>尽管这已经是最简单的调用接口场景，我们甚至还没写一行业务逻辑代码，但讲道理的话代码还是比较繁琐的。</p>
<p>而且其实代码是有一定的“套路”的，比如其实整个代码都是针对请求、成功、失败三部分来处理的，这让我们自然联想到 Promise，同样也是分为  pending、fulfilled、rejected 三种状态。</p>
<p><strong>那么这两者可以结合起来让模版代码精简一下么？</strong></p>
<h4 id="2-2-1-redux-promise-中间件-8"><a href="#2-2-1-redux-promise-中间件-8" class="headerlink" title="2.2.1. redux-promise 中间件[8]"></a>2.2.1. redux-promise 中间件[<a href="https://zhuanlan.zhihu.com/p/24337401" title="Redux 异步方案选型" target="_blank" rel="external">8</a>]</h4><p>首先开门见山地使用 <a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> 中间件来改写之前的代码看看效果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">const</span> FETCH_POSTS_REQUEST = <span class="string">'FETCH_POSTS_REQUEST'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Actions</span></div><div class="line"><span class="keyword">const</span> fetchPosts = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS_REQUEST,</div><div class="line">    <span class="attr">payload</span>: api.getData(id), <span class="comment">// payload 为 Promise 对象</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// reducer</span></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">oldState, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> FETCH_POSTS_REQUEST:</div><div class="line">            <span class="comment">// requestState 被“吃掉”了</span></div><div class="line">            <span class="comment">// 而成功、失败的状态通过 status 来判断</span></div><div class="line">            <span class="keyword">if</span> (action.status === <span class="string">'success'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> successState;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> errorState;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> oldState;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以看出 redux-promise 中间件比较激进、比较原教旨。</p>
<p>不但将发起请求的初始状态被拦截了（原因见下文源码），而且使用 action.status 而不是 action.type 来区分两个 action 这一做法也值得商榷（个人倾向使用 action.type 来判断）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// redux-promise 源码</span></div><div class="line"><span class="keyword">import</span> &#123; isFSA &#125; <span class="keyword">from</span> <span class="string">'flux-standard-action'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val &amp;&amp; <span class="keyword">typeof</span> val.then === <span class="string">'function'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">promiseMiddleware</span>(<span class="params">&#123; dispatch &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!isFSA(action)) &#123;</div><div class="line">      <span class="keyword">return</span> isPromise(action)</div><div class="line">        ? action.then(dispatch)</div><div class="line">        : next(action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> isPromise(action.payload)</div><div class="line">      <span class="comment">// 直接调用 Promise.then（所以发不出请求开始的 action）</span></div><div class="line">      ? action.payload.then(</div><div class="line">          <span class="comment">// 自动 dispatch</span></div><div class="line">          result =&gt; dispatch(&#123; ...action, <span class="attr">payload</span>: result &#125;),</div><div class="line">          <span class="comment">// 自动 dispatch</span></div><div class="line">          error =&gt; &#123;</div><div class="line">            dispatch(&#123; ...action, <span class="attr">payload</span>: error, <span class="attr">error</span>: <span class="literal">true</span> &#125;);</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">      : next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是 redux-promise 的源码，十分简单。主要逻辑是判断如果是 Promise 就执行 then 方法。此外还根据是不是 FSA 决定调用的是 action 本身还是 action.payload 并且对于 FSA 会自动 dispatch 成功和失败的 FSA。</p>
<h4 id="2-2-2-redux-promise-middleware-中间件"><a href="#2-2-2-redux-promise-middleware-中间件" class="headerlink" title="2.2.2. redux-promise-middleware 中间件"></a>2.2.2. redux-promise-middleware 中间件</h4><p>尽管 redux-promise 中间件节省了大量代码，然鹅它的缺点除了拦截请求开始的 action，以及使用 action.status 来判断成功失败状态以外，还有就是由此引申出的一个无法实现的场景————乐观更新（Optimistic Update）。</p>
<p>乐观更新比较直观的栗子就是在微信、QQ等通讯软件中，发送的消息立即在对话窗口中展示，如果发送失败了，在消息旁边展示提示即可。由于在这种交互方式中“乐观”地相信操作会成功，因此称作乐观更新。</p>
<p>因为乐观更新发生在用户发起操作时，所以要实现它，意味着必须有表示用户初始动作的 action。</p>
<p>因此为了解决这些问题，相对于比较原教旨的 redux-promise 来说，更加温和派一点的 <a href="https://github.com/pburtchaell/redux-promise-middleware" target="_blank" rel="external">redux-promise-middleware</a> 中间件应运而生。先看看代码怎么说。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">const</span> FETCH_POSTS = <span class="string">'FETCH_POSTS'</span>; <span class="comment">// 前缀</span></div><div class="line"></div><div class="line"><span class="comment">// Actions</span></div><div class="line"><span class="keyword">const</span> fetchPosts = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS, <span class="comment">// 传递的是前缀，中间件会自动生成中间状态</span></div><div class="line">    payload: &#123;</div><div class="line">        <span class="attr">promise</span>: api.getData(id),</div><div class="line">        <span class="attr">data</span>: id,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// reducer</span></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">oldState, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">`<span class="subst">$&#123;FETCH_POSTS&#125;</span>_PENDING`</span>:</div><div class="line">            <span class="keyword">return</span> requestState; <span class="comment">// 可通过 action.payload.data 获取 id</span></div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">`<span class="subst">$&#123;FETCH_POSTS&#125;</span>_FULFILLED`</span>:</div><div class="line">            <span class="keyword">return</span> successState;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">`<span class="subst">$&#123;FETCH_POSTS&#125;</span>_REJECTED`</span>:</div><div class="line">            <span class="keyword">return</span> errorState;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> oldState;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果不需要乐观更新，fetchPosts 函数可以更加简洁。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此时初始 actionGET_DATA_PENDING 仍然会触发，但是 payload 为空。</span></div><div class="line"><span class="keyword">const</span> fetchPosts = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">type</span>: FETCH_POSTS, <span class="comment">// 传递的是前缀</span></div><div class="line">    payload: api.getData(id), <span class="comment">// 等价于 payload: &#123; promise: api.getData(id) &#125;,</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>相对于 redux-promise 简单粗暴地直接过滤初始 action，从 reducer 可以看出，redux-promise-middleware 会首先自动触发一个 FETCH_POSTS_PENDING 的 action，以此保留乐观更新的能力。</p>
<p>并且，在状态的区分上，回归了通过 action.type 来判断状态的“正途”，其中 <code>_PENDING</code>、<code>_FULFILLED</code>、<code>_REJECTED</code> 后缀借用了 Promise 规范 (当然它们是可配置的) 。</p>
<blockquote>
<p><a href="https://github.com/pburtchaell/redux-promise-middleware/blob/master/docs/guides/custom-suffixes.md" target="_blank" rel="external">后缀可以配置全局或局部生效，例如全局配置可以这么写。</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">applyMiddleware(</div><div class="line">  promiseMiddleware(&#123;</div><div class="line">    <span class="attr">promiseTypeSuffixes</span>: [<span class="string">'LOADING'</span>, <span class="string">'SUCCESS'</span>, <span class="string">'ERROR'</span>]</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
</blockquote>
<p><a href="https://github.com/pburtchaell/redux-promise-middleware/blob/master/src/index.js" target="_blank" rel="external">源码地址点我</a>，类似 redux-promise 也是在中间件中拦截了 payload 中有 Promise 的 action，并主动 dispatch 三种状态的 action，注释也很详细在此就不赘述了。</p>
<blockquote>
<p>注意：redux-promise、redux-promise-middleware 与 redux-thunk 之间并不是互相替代的关系，而更像一种补充优化。</p>
</blockquote>
<h3 id="2-3-redux-loop-中间件"><a href="#2-3-redux-loop-中间件" class="headerlink" title="2.3. redux-loop 中间件"></a>2.3. redux-loop 中间件</h3><p>简单小结一下，Redux 的数据流如下所示：</p>
<p><strong>UI =&gt; action =&gt; action creator =&gt; reducer =&gt; store =&gt; react =&gt; v-dom =&gt; UI</strong></p>
<p>redux-thunk 的思路是保持 action 和 reducer 简单纯粹，然鹅副作用操作（在前端主要体现在异步操作上）的复杂度是不可避免的，因此它将其放在了 action creator 步骤，通过 thunk 函数手动控制每一次的 dispatch。</p>
<p>redux-promise 和 redux-promise-middleware 只是在其基础上做一些辅助性的增强，处理异步的逻辑本质上是相同的，即将维护复杂异步操作的责任推到了用户的身上。</p>
<p><img src="/blog/imgs/redux/flux-diagram.png" alt="flux-diagram"></p>
<p>这种实现方式固然很好理解，而且理论上可以应付所有异步场景，但是由此带来的问题就是模版代码太多，一旦流程复杂那么异步代码就会到处都是，很容易导致出现 bug。</p>
<p><img src="/blog/imgs/redux/redux-thunk-architecture.png" alt="redux-thunk-architecture"></p>
<p>因此有一些其他的中间件，例如 <a href="https://github.com/redux-loop/redux-loop" target="_blank" rel="external">redux-loop</a> 就将异步处理逻辑放在 reducer 中。（Redux 的思想借鉴了 <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a>，<strong>注意并不是“饿了么”</strong>，而 Elm 就是将异步处理放在 update（reducer） 层中）。</p>
<blockquote>
<p>Synchronous state transitions caused by returning a new state from the reducer in response to an action are just one of all possible effects an action can have on application state.<br>这种通过响应一个 action，在 reducer 中返回一个新 state，从而引起同步状态转换的方式，只是在应用状态中一个 action 能拥有的所有可能影响的一种。（可能没翻好~欢迎勘误~）</p>
</blockquote>
<p>redux-loop 认为许多其他的处理异步的中间件，尤其是通过 action creator 方式实现的中间件，错误地让用户认为异步操作从根本上与同步操作并不相同。这样一来无形中鼓励了中间件以许多特殊的方式来处理异步状态。</p>
<p>与之相反，redux-loop 专注于让 reducer 变得足够强大以便处理同步和异步操作。在具体实现上 reducer 不仅能够根据特定的 action 决定当前的转换状态，而且还能决定接着发生的操作。</p>
<p>应用中所有行为都可以在一个地方（reducer）中被追踪，并且这些行为可以轻易地分割和组合。（redux 作者 Dan 开了个至今依然 open 的 issue：<a href="https://github.com/reactjs/redux/issues/1528" target="_blank" rel="external">Reducer Composition with Effects in JavaScript</a>，讨论关于对 reducer 进行分割组合的问题。）</p>
<p><img src="/blog/imgs/redux/redux-loop-architecture.png" alt="redux-loop-architecture"></p>
<p>redux-loop 模仿 Elm 的模式，引入了 Effect 的概念，在 reducer 中对于异步等操作使用 Effect 来处理。如下官方示例所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Effects, loop &#125; <span class="keyword">from</span> <span class="string">'redux-loop'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> fetch(<span class="string">`endpoint/<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line">    .then(<span class="function">(<span class="params">r</span>) =&gt;</span> r.json())</div><div class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'FETCH_SUCCESS'</span>, <span class="attr">payload</span>: data &#125;))</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'FETCH_FAILURE'</span>, <span class="attr">payload</span>: error.message &#125;));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'FETCH_START'</span>:</div><div class="line">      <span class="keyword">return</span> loop( <span class="comment">// &lt;- 并没有直接返回 state，实际上了返回数组 [state, effect]</span></div><div class="line">        &#123; ...state, <span class="attr">loading</span>: <span class="literal">true</span> &#125;,</div><div class="line">        Effects.promise(fetchData, action.payload.id)</div><div class="line">      );</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'FETCH_SUCCESS'</span>:</div><div class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">data</span>: action.payload &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'FETCH_FAILURE'</span>:</div><div class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">errorMessage</span>: action.payload &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然这个想法很 Elm 很函数式，不过由于修改了 reducer 的返回类型，这样一来会导致许多已有的 Api 和第三方库无法使用，甚至连 redux 库中的 combineReducers 方法都需要使用 redux-loop 提供的定制版本。因此这也是 redux-loop 最终无法转正的原因：</p>
<blockquote>
<p>“If a solution doesn’t work with vanilla combineReducers(), it won’t get into Redux core.”</p>
</blockquote>
<h2 id="三、复杂异步操作"><a href="#三、复杂异步操作" class="headerlink" title="三、复杂异步操作"></a>三、复杂异步操作</h2><h3 id="3-1-更复杂的通知场景-9"><a href="#3-1-更复杂的通知场景-9" class="headerlink" title="3.1. 更复杂的通知场景[9]"></a>3.1. 更复杂的通知场景[<a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/38574266#38574266" title="Sebastien Lorber - how to dispatch a redux action with a timeout" target="_blank" rel="external">9</a>]</h3><p>让我们的思路重新回到通知的场景，之前的代码实现了：</p>
<ul>
<li>展示一个通知并在数秒后消失</li>
<li>可以同时展示多个通知。</li>
</ul>
<p>现在假设可亲可爱的产品又提出了新需求：</p>
<ul>
<li>同时不展示多于3个的通知</li>
<li>如果已有3个通知正在展示，此时的新通知请求将排队延迟展示。</li>
</ul>
<blockquote>
<p>“这个实现不了…”（全文完）</p>
</blockquote>
<p>这个当然可以实现，只不过如果只用之前的 redux-thunk 实现起来会很麻烦。例如可以在 store 中增加两个数组分别表示当前展示列表和等待队列，然后在 reducer 中手动控制各个状态时这俩数组的变化。</p>
<h3 id="3-2-redux-saga-中间件"><a href="#3-2-redux-saga-中间件" class="headerlink" title="3.2. redux-saga 中间件"></a>3.2. redux-saga 中间件</h3><p>首先来看看使用了 redux-saga 后代码会变成怎样~（代码来自生产环境的某 app）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">toastSaga</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> MaxToasts = <span class="number">3</span>;</div><div class="line">    <span class="keyword">const</span> ToastDisplayTime = <span class="number">4000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> pendingToasts = []; <span class="comment">// 等待队列</span></div><div class="line">    <span class="keyword">let</span> activeToasts = [];  <span class="comment">// 展示列表</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">displayToast</span>(<span class="params">toast</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( activeToasts &gt;= MaxToasts ) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"can't display more than "</span> + MaxToasts + <span class="string">" at the same time"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        activeToasts = [...activeToasts, toast];      <span class="comment">// 新增通知到展示列表</span></div><div class="line">        <span class="keyword">yield</span> put(events.toastDisplayed(toast));      <span class="comment">// 展示通知</span></div><div class="line">        <span class="keyword">yield</span> call(delay, ToastDisplayTime);          <span class="comment">// 通知的展示时间</span></div><div class="line">        <span class="keyword">yield</span> put(events.toastHidden(toast));         <span class="comment">// 隐藏通知</span></div><div class="line">        activeToasts = _.without(activeToasts,toast); <span class="comment">// 从展示列表中删除</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">toastRequestsWatcher</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">const</span> event = <span class="keyword">yield</span> take(Names.TOAST_DISPLAY_REQUESTED); <span class="comment">// 监听通知展示请求</span></div><div class="line">            <span class="keyword">const</span> newToast = event.data.toastData;</div><div class="line">            pendingToasts = [...pendingToasts, newToast]; <span class="comment">// 将新通知放入等待队列</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">toastScheduler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (activeToasts.length &lt; MaxToasts &amp;&amp; pendingToasts.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">const</span> [firstToast,...remainingToasts] = pendingToasts;</div><div class="line">                pendingToasts = remainingToasts;</div><div class="line">                <span class="keyword">yield</span> fork(displayToast, firstToast); <span class="comment">// 取出队头的通知进行展示</span></div><div class="line"></div><div class="line">                <span class="comment">// 增加一点延迟，这样一来两个并发的通知请求不会同时展示</span></div><div class="line">                <span class="keyword">yield</span> call(delay, <span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">yield</span> call(delay, <span class="number">50</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">yield</span> [</div><div class="line">        call(toastRequestsWatcher),</div><div class="line">        call(toastScheduler)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// reducer</span></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123;toasts: []&#125;, event</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (event.name) &#123;</div><div class="line">        <span class="keyword">case</span> Names.TOAST_DISPLAYED:</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">toasts</span>: [...state.toasts, event.data.toastData]</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> Names.TOAST_HIDDEN:</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">toasts</span>: _.without(state.toasts, event.data.toastData)</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>先不要在意代码的细节，简单分析一下上述代码的逻辑：</p>
<ul>
<li>store 上只有一个 toasts 节点，且 reducer 十分干净</li>
<li>排队等具体的业务逻辑都放到了 toastSaga 函数中<ul>
<li>displayToast 函数负责单个通知的展示和消失逻辑</li>
<li>toastRequestsWatcher 函数负责监听请求，将其加入等待队列</li>
<li>toastScheduler 函数负责将等待队列中的元素加入展示列表</li>
</ul>
</li>
</ul>
<p>基于这样逻辑分离的写法，还可以继续满足更加复杂的需求：</p>
<ul>
<li>如果在等待队列中有太多通知，动态减少通知的展示时间</li>
<li>根据窗口大小的变化，改变最多展示的通知数量</li>
<li>…</li>
</ul>
<p><strong>redux-saga V.S. redux-thunk[<a href="http://stackoverflow.com/questions/34930735/pros-cons-of-using-redux-saga-with-es6-generators-vs-redux-thunk-with-es7-async/37742622#37742622" title="Pros/cons of using redux-saga with ES6 generators vs redux-thunk with ES7 async/await" target="_blank" rel="external">11</a>]</strong><br>redux-saga 的优点：</p>
<ul>
<li>易于测试，因为 redux-saga 中所有操作都 yield 简单对象，所以测试只要判断返回的对象是否正确即可，而测试 thunk 通常需要你在测试中引入一个 mockStore</li>
<li>redux-saga 提供了一些方便的辅助方法。（takeLatest、cancel、race 等）</li>
<li>在 saga 函数中处理业务逻辑和异步操作，这样一来通常代码更加清晰，更容易增加和更改功能</li>
<li>使用 ES6 的 generator，以同步的方式写异步代码</li>
</ul>
<p>redux-saga 的缺点：</p>
<ul>
<li>generator 的语法（”又是 * 又是 yield 的，很难理解诶~”）</li>
<li>学习曲线陡峭，有许多概念需要学习（”fork、join 这不是进程的概念么？这些 yield 是以什么顺序执行的？”）</li>
<li>API 的稳定性，例如新增了 channel 特性，并且社区也不是很大。</li>
</ul>
<blockquote>
<p><a href="https://github.com/tylerlong/hello-async" target="_blank" rel="external">通知场景各种中间件写法的完整代码可以看这里</a></p>
</blockquote>
<h3 id="3-3-理解-Saga-Pattern-14"><a href="#3-3-理解-Saga-Pattern-14" class="headerlink" title="3.3. 理解 Saga Pattern[14]"></a>3.3. 理解 Saga Pattern[<a href="http://denny.qollie.com/2016/05/14/redux-saga/" title="Saga Pattern 在前端的應用" target="_blank" rel="external">14</a>]</h3><h4 id="3-3-1-Saga-是什么"><a href="#3-3-1-Saga-是什么" class="headerlink" title="3.3.1. Saga 是什么"></a>3.3.1. Saga 是什么</h4><p>Sagas 的概念来源于<a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" title="sagas 论文" target="_blank" rel="external">这篇论文</a>，该论文从数据库的角度谈了 Saga Pattern。</p>
<blockquote>
<p>Saga 就是能够满足特定条件的长事务（Long Lived Transaction）</p>
</blockquote>
<p>暂且不提这个特定条件是什么，首先一般学过数据库的都知道事务（Transaction）是啥~</p>
<blockquote>
<p>如果不知道的话可以用转账来理解，A 转给 B 100 块钱的操作需要保证完成 A 先减 100 块钱然后 B 加 100 块钱这两个操作，这样才能保证转账前后 A 和 B 的存款总额不变。<br>如果在给 B 加 100 块钱的过程中发生了异常，那么就要返回转账前的状态，即给 A 再加上之前减的 100 块钱(不然钱就不翼而飞了)，这样的一次转账（要么转成功，要么失败返回转账前的状态）就是一个事务。</p>
</blockquote>
<h4 id="3-3-2-长事务的问题"><a href="#3-3-2-长事务的问题" class="headerlink" title="3.3.2. 长事务的问题"></a>3.3.2. 长事务的问题</h4><blockquote>
<p>长事务顾名思义就是一个长时间的事务。</p>
</blockquote>
<p>一般来说是通过给正在进行事务操作的对象加锁，来保证事务并发时不会出错。</p>
<p>例如 A 和 B 都给 C 转 100 块钱。</p>
<ul>
<li>如果不加锁，极端情况下 A 先转给 C 100 块，而 B 读取到了 C 转账前的数值，这时 B 的转账会覆盖 A 的转账，C 只加了 100 块钱，另 100 块不翼而飞了。</li>
<li>如果加了锁，这时 B 的转账会等待 A 的转账完成后再进行。所以 C 能正确地收到 200 块钱。</li>
</ul>
<blockquote>
<p>以押尾光太郎的指弹演奏会售票举例，在一个售票的时间段后，最终举办方需要确定售票数量，这就是一个长事务。</p>
</blockquote>
<p><strong>然鹅，对于长事务来说总不能一直锁住对应数据吧？</strong></p>
<p>为了解决这个问题，假设一个长事务：T，</p>
<p>可以被拆分成许多相互独立的子事务（subtransaction）：t_1 ~ t_n。</p>
<blockquote>
<p>以上述押尾桑的表演为例，每个 <code>t</code> 就是一笔售票记录。</p>
</blockquote>
<p><img src="/blog/imgs/redux/subtransaction.jpg" alt="subtransaction"></p>
<p>假如每次购票都一次成功，且没有退票的话，整个流程就如下图一般被正常地执行。</p>
<p><img src="/blog/imgs/redux/success-subtransaction.jpg" alt="success-subtransaction"></p>
<p><strong>那假如有某次购票失败了怎么办？</strong></p>
<h4 id="3-3-3-Saga-的特殊条件"><a href="#3-3-3-Saga-的特殊条件" class="headerlink" title="3.3.3. Saga 的特殊条件"></a>3.3.3. Saga 的特殊条件</h4><blockquote>
<p>A LLT is a saga if it can be written as a sequence of transactions that can be interleaved with other transactions.<br>Saga 就是能够被写成事务的序列，并且能够在执行过程中被其他事务插入执行的长事务。</p>
</blockquote>
<p>Saga 通过引入补偿事务（Compensating Transaction）的概念，解决事务失败的问题。</p>
<p>即任何一个 saga 中的子事务 t_i，都有一个补偿事务 c_i 负责将其撤销（undo）。</p>
<blockquote>
<p>注意是撤销该子事务，而不是回到子事务发生前的时间点。</p>
</blockquote>
<p>根据以上逻辑，可以推出很简单的公式：</p>
<ul>
<li>Saga 如果全部执行成功那么子事务序列看起来像这样：<code>t_1, t_2, t_3, ..., t_n</code></li>
</ul>
<p><img src="/blog/imgs/redux/success-subtransaction.gif" alt="success-subtransaction"></p>
<ul>
<li>Saga 如果执行全部失败那么子事务序列看起来像这样：<code>t_1, t_2, t_3, ..., t_n, c_n, ..., c_1</code></li>
</ul>
<p><img src="/blog/imgs/redux/failure-subtransaction.gif" alt="failure-subtransaction"></p>
<blockquote>
<p>注意到图中的 c_4 其实并没有必要，不过因为每次撤销执行都应该是幂等（Idempotent）的，所以也不会出错。</p>
</blockquote>
<p>篇幅有限在此就不继续深入介绍…</p>
<ul>
<li>推荐看看从分布式系统方面讲 Saga Pattern 的视频：<a href="https://www.youtube.com/watch?v=xDuwrtwYHu8" target="_blank" rel="external">GOTO 2015 • Applying the Saga Pattern • Caitie McCaffrey</a></li>
<li>MSDN 的文章：<a href="https://msdn.microsoft.com/en-us/library/jj591569.aspx" target="_blank" rel="external">A Saga on Sagas</a></li>
</ul>
<h3 id="3-4-响应式编程（Reactive-Programming）-15"><a href="#3-4-响应式编程（Reactive-Programming）-15" class="headerlink" title="3.4. 响应式编程（Reactive Programming）[15]"></a>3.4. 响应式编程（Reactive Programming）[<a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" title="The introduction to Reactive Programming you&#39;ve been missing" target="_blank" rel="external">15</a>]</h3><p>redux-saga 中间件基于 Sagas 的理论，通过监听 action，生成对应的各种子 saga（子事务）解决了复杂异步问题。</p>
<p><img src="/blog/imgs/redux/redux-saga.png" alt="redux-saga"></p>
<p>而接下来要介绍的 redux-observable 中间件背后的理论是响应式编程（Reactive Programming）。</p>
<blockquote>
<p>In computing, reactive programming is a programming paradigm oriented around data flows and the propagation of change.</p>
</blockquote>
<p>简单来说，响应式编程是针对异步数据流的编程并且认为：万物皆流（Everything is Stream）。</p>
<p><img src="/blog/imgs/redux/everything-is-stream.jpg" alt="everything-is-stream"></p>
<p>流（Stream）就是随着时间的流逝而发生的一系列事件。</p>
<p>例如点击事件的示意图就是这样。</p>
<p><img src="/blog/imgs/redux/click-stream.png" alt="click-stream"></p>
<p>用字符表示【上上下下左右左右BABA】可以像这样。（注意顺序是从左往右）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--上----上-下---下----左---右-B--A-B--A---X-|-&gt;</div><div class="line"></div><div class="line">上, 下, 左, 右, B, A 是数据流发射的值</div><div class="line">X 是数据流发射的错误</div><div class="line">| 是完成信号</div><div class="line">---&gt; 是时间线</div></pre></td></tr></table></figure>
<p>那么我们要根据一个点击流来计算点击次数的话可以这样。（一般响应式编程库都会提供许多辅助方法如 map、filter、scan 等）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  clickStream: ---c----c--c----c------c--&gt;</div><div class="line">                    map(c becomes 1)</div><div class="line">               ---1----1--1----1------1--&gt;</div><div class="line">                         scan(+)</div><div class="line">counterStream: ---1----2--3----4------5--&gt;</div></pre></td></tr></table></figure>
<p>如上所示，原始的 clickStream 经过 map 后产生了一个新的流（注意原始流不变），再对该流进行 scan(+) 的操作就生成了最终的 counterStream。</p>
<p>再来个栗子~，假设我们需要从点击流中得到关于双击的流（250ms 以内），并且对于大于两次的点击也认为是双击。先想一想应该怎么用传统的命令式、状态式的方式来写，然后再想想用流的思考方式又会是怎么样的~。</p>
<p><img src="/blog/imgs/redux/multiple-clicks-stream.png" alt="multiple-clicks-stream"></p>
<p>这里我们用了以下辅助方法：</p>
<ul>
<li>节流：throttle(250ms)，将原始流在 250ms 内的所有数据当作一次事件发射</li>
<li>缓冲（不造翻译成啥比较好）：buffer，将 250ms 内收集的数据放入一个数据包裹中，然后发射这些包裹</li>
<li>映射：map，这个不解释</li>
<li>过滤：filter，这个也不解释</li>
</ul>
<p>更多内容请继续学习 <a href="https://github.com/Reactive-Extensions/RxJS" target="_blank" rel="external">RxJS</a>。</p>
<h3 id="3-5-redux-observable-中间件-16"><a href="#3-5-redux-observable-中间件-16" class="headerlink" title="3.5. redux-observable 中间件[16]"></a>3.5. redux-observable 中间件[<a href="https://medium.com/kevin-salters-blog/epic-middleware-in-redux-e4385b6ff7c6#.xy9wg2dd6" title="Epic Middleware in Redux" target="_blank" rel="external">16</a>]</h3><p>redux-observable 就是一个使用 RxJS 监听每个 action 并将其变成可观测流（observable stream）的中间件。</p>
<p>其中最核心的概念叫做 epic，就是一个监听流上 action 的函数，这个函数在接收 action 并进行一些操作后可以再返回新的 action。</p>
<blockquote>
<p>At the highest level, epics are “actions in, actions out”</p>
</blockquote>
<p>redux-observable 通过在后台执行 <code>.subscribe(store.dispatch)</code> 实现监听。</p>
<p>Epic 像 Saga 一样也是 Long Lived，即在应用初始化时启动，持续运行到应用关闭。虽然 redux-observable 是一个中间件，但是类似于 redux-saga，可以想象它就像新开的进/线程，监听着 action。</p>
<p><img src="/blog/imgs/redux/redux-observable-flow.png" alt="redux-observable-flow"></p>
<p>在这个运行流程中，epic 不像 thunk 一样拦截 action，或阻止、改变任何原本 redux 的生命周期的其他东西。这意味着每个 dispatch 的 action 总会经过 reducer 处理，实际上在 epic 监听到 action 前，action 已经被 reducer 处理过了。</p>
<p>所以 epic 的功能就是监听所有的 action，过滤出需要被监听的部分，对其执行一些带副作用的异步操作，然后根据你的需要可以再发射一些新的 action。</p>
<p>举个自动保存的栗子，界面上有一个输入框，每次用户输入了数据后，去抖动后进行自动保存，并在向服务器发送请求的过程中显示正在保存的 UI，最后显示成功或失败的 UI。</p>
<p><img src="/blog/imgs/redux/autosave.gif" alt="autosave"></p>
<p>使用 redux-observable 中间件编写代码，可以仅用十几行关键代码就实现上述功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/dom/ajax'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/catch'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/debounceTime'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/mergeMap'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/startWith'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    isSaving, savingSuccess, savingError,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'../actions/autosave-actions.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> saveField = <span class="function">(<span class="params">action$</span>) =&gt;</span> <span class="comment">// 一般在变量后面加 $ 表示是个 stream</span></div><div class="line">    action$</div><div class="line">        .ofType(<span class="string">'SAVE_FIELD'</span>)  <span class="comment">// 使用 ofType 监听 'SAVE_FIELD' action</span></div><div class="line">        .debounceTime(<span class="number">500</span>)     <span class="comment">// 防抖动</span></div><div class="line">        <span class="comment">// 即 map + mergeAll 因为异步导致 map 后有多个流需要 merge</span></div><div class="line">        .mergeMap(<span class="function">(<span class="params">&#123; payload &#125;</span>) =&gt;</span></div><div class="line">            Observable.ajax(&#123;  <span class="comment">// 发起请求</span></div><div class="line">                method: <span class="string">'PATCH'</span>,</div><div class="line">                <span class="attr">url</span>: payload.url,</div><div class="line">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload),</div><div class="line">            &#125;)</div><div class="line">            .map(<span class="function"><span class="params">res</span> =&gt;</span> savingSuccess(res))                 <span class="comment">// 发出成功的 action</span></div><div class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> Observable.of(savingError(err)))  <span class="comment">// 捕捉错误并发出 action</span></div><div class="line">            .startWith(isSaving())                          <span class="comment">// 发出请求开始的 action</span></div><div class="line">        );</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> saveField;</div></pre></td></tr></table></figure>
<p>篇幅有限在此就不继续深入介绍…</p>
<ul>
<li>关于 redux-observable 的前世今生推荐看看 Netfix 工程师的这个视频：<a href="https://www.youtube.com/watch?v=AslncyG8whg" target="_blank" rel="external">Netflix JavaScript Talks - RxJS + Redux + React = Amazing!</a></li>
<li>如果觉得看视频听英语麻烦的话知乎有人翻译了…<ul>
<li><a href="https://zhuanlan.zhihu.com/p/24263212" target="_blank" rel="external">RxJS + Redux + React = Amazing!（译一）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24285468" target="_blank" rel="external">RxJS + Redux + React = Amazing!（译二）</a></li>
</ul>
</li>
</ul>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文从为 Redux 应用添加日志功能（记录每一次的 dispatch）入手，引出 redux 的中间件（middleware）的概念和实现方法。</p>
<p>接着从最简单的 setTimeout 的异步操作开始，通过对比各种实现方法引出 redux 最基础的异步中间件 redux-thunk。</p>
<p>针对 redux-thunk 使用时模版代码过多的问题，有介绍了用于优化的 redux-promise 和 redux-promise-middleware 两款中间件。</p>
<p>由于本质上以上中间件都是基于 thunk 的机制来解决异步问题，所以不可避免地将维护异步状态的责任推给了开发者，并且也因为难以测试的原因。在复杂的异步场景下使用起来难免力不从心，容易出现 bug。</p>
<p>所以还简单介绍了一下将处理副作用的步骤放到 reducer 中并通过 Effect 进行解决的 redux-loop 中间件。然鹅因为其无法使用官方 combineReducers 的原因而无法被纳入 redux 核心代码中。</p>
<p>此外社区根据 Saga 的概念，利用 ES6 的 generator 实现了 redux-saga 中间件。虽然通过 saga 函数将业务代码分离，并且可以用同步的方式流程清晰地编写异步代码，但是较多的新概念和 generator 的语法可能让部分开发者望而却步。</p>
<p>同样是基于观察者模式，通过监听 action 来处理异步操作的 redux-observable 中间件，背后的思想是响应式编程（Reactive Programming）。类似于 saga，该中间件提出了 epic 的概念来处理副作用。即监听 action 流，一旦监听到目标 action，就处理相关副作用，并且还可以在处理后再发射新的 action，继续进行处理。尽管在处理异步流程时同样十分方便，但对于开发者的要求同样很高，需要开发者学习关于函数式的相关理论。</p>
<h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ol>
<li><a href="http://redux.js.org/" title="Redux 英文原版文档" target="_blank" rel="external">Redux 英文原版文档</a></li>
<li><a href="http://cn.redux.js.org/docs/advanced/Middleware.html" title="Redux 中文文档" target="_blank" rel="external">Redux 中文文档</a></li>
<li><a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559" title="Dan Abramov - how to dispatch a redux action with a timeout" target="_blank" rel="external">Dan Abramov - how to dispatch a redux action with a timeout</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" title="阮一峰 - Redux 入门教程（二）：中间件与异步操作" target="_blank" rel="external">阮一峰 - Redux 入门教程（二）：中间件与异步操作</a></li>
<li><a href="https://github.com/kenberkeley/redux-simple-tutorial/blob/master/redux-advanced-tutorial.md" title="Redux 莞式教程" target="_blank" rel="external">Redux 莞式教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20597452" title="redux middleware 详解" target="_blank" rel="external">redux middleware 详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" title="Thunk 函数的含义和用法" target="_blank" rel="external">Thunk 函数的含义和用法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24337401" title="Redux 异步方案选型" target="_blank" rel="external">Redux异步方案选型</a></li>
<li><a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/38574266#38574266" title="Sebastien Lorber - how to dispatch a redux action with a timeout" target="_blank" rel="external">Sebastien Lorber - how to dispatch a redux action with a timeout</a></li>
<li><a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" title="sagas 论文" target="_blank" rel="external">Sagas 论文</a></li>
<li><a href="http://stackoverflow.com/questions/34930735/pros-cons-of-using-redux-saga-with-es6-generators-vs-redux-thunk-with-es7-async/37742622#37742622" title="Pros/cons of using redux-saga with ES6 generators vs redux-thunk with ES7 async/await" target="_blank" rel="external">Pros/cons of using redux-saga with ES6 generators vs redux-thunk with ES7 async/await</a></li>
<li><a href="https://redux-saga.github.io/redux-saga/" title="Redux-saga 英文文档" target="_blank" rel="external">Redux-saga 英文文档</a></li>
<li><a href="http://leonshi.com/redux-saga-in-chinese/index.html" title="Redux-saga 中文文档" target="_blank" rel="external">Redux-saga 中文文档</a></li>
<li><a href="http://denny.qollie.com/2016/05/14/redux-saga/" title="Saga Pattern 在前端的應用" target="_blank" rel="external">Saga Pattern 在前端的應用</a></li>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" title="The introduction to Reactive Programming you&#39;ve been missing" target="_blank" rel="external">The introduction to Reactive Programming you’ve been missing</a></li>
<li><a href="https://medium.com/kevin-salters-blog/epic-middleware-in-redux-e4385b6ff7c6#.xy9wg2dd6" title="Epic Middleware in Redux" target="_blank" rel="external">Epic Middleware in Redux</a></li>
</ol>
<p>以上 to be continued…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;在上一篇中介绍了 Redux 的各项基础 api。接着一步一步地介绍如何与 React 进行结合，并从引入过程中遇到的各个痛
    
    </summary>
    
      <category term="前端" scheme="https://buptsteve.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://buptsteve.github.io/blog/tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://buptsteve.github.io/blog/tags/Redux/"/>
    
      <category term="React" scheme="https://buptsteve.github.io/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>「7」Redux 基础 - react 全家桶学习笔记（一）</title>
    <link href="https://buptsteve.github.io/blog/2016/10/25/7.redux-basis/"/>
    <id>https://buptsteve.github.io/blog/2016/10/25/7.redux-basis/</id>
    <published>2016-10-25T15:00:35.000Z</published>
    <updated>2016-10-26T10:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、环境搭建"><a href="#零、环境搭建" class="headerlink" title="零、环境搭建"></a>零、环境搭建</h2><p><strong>参考资料</strong></p>
<ul>
<li><a href="http://redux.js.org/" target="_blank" rel="external">英文原版文档</a></li>
<li><a href="http://cn.redux.js.org/" target="_blank" rel="external">中文文档</a></li>
<li><a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">墙裂推荐作者出的教学视频 基础篇</a></li>
<li><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux" target="_blank" rel="external">墙裂推荐作者出的教学视频 高级篇</a></li>
</ul>
<p>首先要明确一点，虽然 redux 是由 <a href="http://facebook.github.io/flux/" target="_blank" rel="external">flux</a> 演变而来，但我们完全可以并且也应该抛开 react 进行学习，这样可以避免一开始就陷入各种细节之中。</p>
<p>所以推荐使用 <a href="https://jsbin.com/" target="_blank" rel="external">jsbin</a> 进行调试学习，或者使用 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">react-create-app</a> 作为项目脚手架。</p>
<h2 id="一、Redux-是什么？"><a href="#一、Redux-是什么？" class="headerlink" title="一、Redux 是什么？"></a>一、Redux 是什么？</h2><blockquote>
<p>Redux is a predictable state container for JavaScript apps.<br>Redux 是一个 JavaScript 状态容器，提供可预测化的状态管理。</p>
</blockquote>
<p><img src="/blog/imgs/redux/overview.png" alt="overview"></p>
<p><strong>先不要在意那些细节</strong></p>
<ul>
<li>总的来说，redux 使用 store 保存并管理页面中的各种状态（state）</li>
<li>当需要改变 state 时，使用 dispatch 调用 action creators 触发 action</li>
<li>接着使用纯函数（pure function）reducer 来处理这些 action，它会根据当前 state 和 action 返回（注意这里不是修改）新的 state</li>
<li>view 层可以对于 state 进行订阅（subscribe），这样就可以得到新的 state，从而可以刷新界面（所以十分适合数据驱动的前端框架）</li>
</ul>
<blockquote>
<p>纯函数：简单的说就是对于同样的输入总是返回同样的输出，并且没有副作用的函数。（推荐学习了解下函数式编程）</p>
</blockquote>
<h3 id="1-1-为什么选择-redux？"><a href="#1-1-为什么选择-redux？" class="headerlink" title="1.1. 为什么选择 redux？"></a>1.1. 为什么选择 redux？</h3><blockquote>
<ul>
<li><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p>
</li>
<li><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。</p>
</li>
<li><p>如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗？当然不是。</p>
</li>
<li><p>这里的复杂性很大程度上来自于：我们总是将两个难以厘清的概念混淆在一起：<strong>变化</strong>和<strong>异步</strong>。 我称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 试图在视图层禁止异步和直接操作 DOM 来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。</p>
</li>
<li><p>跟随 Flux、CQRS 和 Event Sourcing 的脚步，通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。这些限制条件反映在 Redux 的 三大原则中。</p>
</li>
</ul>
</blockquote>
<p><strong>简单总结就是使用 Redux 我们就可以<del>没有蛀牙（大雾）</del></strong></p>
<ul>
<li>拥有可预测（predictable）的应用状态，所以应用的行为也是可预测的</li>
<li>因为 reducer 是纯函数，所以方便对于状态迁移进行自动化测试</li>
<li>方便地记录日志，甚至实现时间旅行（time travel）</li>
</ul>
<h3 id="1-2-三大原则（哲♂学）"><a href="#1-2-三大原则（哲♂学）" class="headerlink" title="1.2. 三大原则（哲♂学）"></a>1.2. 三大原则（哲♂学）</h3><h4 id="1-2-1-单一数据源（Single-source-of-truth）"><a href="#1-2-1-单一数据源（Single-source-of-truth）" class="headerlink" title="1.2.1. 单一数据源（Single source of truth）"></a>1.2.1. 单一数据源（Single source of truth）</h4><p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p>
<ul>
<li>来自服务端的 state 可以在无需编写更多代码的情况下被序列化并注入到客户端中</li>
<li>便于调试，在开发时可以将状态保存在本地</li>
<li>Undo/Redo 可以轻松实现，从而实现时间旅行</li>
</ul>
<h4 id="1-2-2-State-是只读的（State-is-read-only）"><a href="#1-2-2-State-是只读的（State-is-read-only）" class="headerlink" title="1.2.2. State 是只读的（State is read-only）"></a>1.2.2. State 是只读的（State is read-only）</h4><p>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p>
<p>因为所有的修改都被集中化处理，且严格按照一个接一个的顺序执行，（dispatch 同步调用 reduce 函数）因此不用担心 race condition 的出现。 Action 就是普通对象而已，因此它们可以被日志打印、序列化、储存、后期调试或测试时回放出来。</p>
<h4 id="1-2-3-使用纯函数来执行修改（Changes-are-made-with-pure-functions）"><a href="#1-2-3-使用纯函数来执行修改（Changes-are-made-with-pure-functions）" class="headerlink" title="1.2.3. 使用纯函数来执行修改（Changes are made with pure functions）"></a>1.2.3. 使用纯函数来执行修改（Changes are made with pure functions）</h4><p>为了描述 action 如何改变 state tree ，你需要编写 reducer。</p>
<p>Reducer 只是纯函数，它接收先前的 state 和 action，并返回新的 state。刚开始你可以只有一个 reducer，随着应用变大，你可以把它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分。</p>
<h2 id="二、Redux-基础"><a href="#二、Redux-基础" class="headerlink" title="二、Redux 基础"></a>二、Redux 基础</h2><h3 id="2-1-action"><a href="#2-1-action" class="headerlink" title="2.1. action"></a>2.1. action</h3><p>Action 就是一个普通的 JavaScript Object。</p>
<p>redux 唯一限制的一点是必须有一个 type 属性用来表示执行哪种操作，值最好用字符串，而不是 Symbols，因为字符串是可被序列化的。</p>
<p>其他属性用来传递此次操作所需传递的数据，redux 对此不作限制，但是在设计时可以参照 <a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">Flux 标准 Action</a>。</p>
<p><strong>简单总结 Flux Standard action 就是</strong></p>
<blockquote>
<ol>
<li>一个 action 必须是一个 JavaScript Object，并且有一个 type 属性。</li>
<li>一个 action 可以有 payload/error/meta 属性。</li>
<li>一个 action 不能有其他属性。</li>
</ol>
</blockquote>
<h3 id="2-2-reducer"><a href="#2-2-reducer" class="headerlink" title="2.2. reducer"></a>2.2. reducer</h3><p>Reducer 的工作就是接收旧的 state 和 action，返回新的 state。</p>
<blockquote>
<p>(previousState, action) =&gt; newState</p>
</blockquote>
<p>之所以称作 reducer 是因为它将被传递给 <code>Array.prototype.reduce(reducer, ?initialValue)</code> 方法。保持 reducer 纯净非常重要。永远不要在 reducer 里做这些操作：</p>
<ul>
<li>修改传入参数；</li>
<li>执行有副作用的操作，如 API 请求和路由跳转；</li>
<li>调用非纯函数，如 Date.now() 或 Math.random()。</li>
</ul>
<h3 id="2-3-store"><a href="#2-3-store" class="headerlink" title="2.3. store"></a>2.3. store</h3><p>Store 就是用来维持应用所有的 state 树的一个对象。</p>
<p>在 redux 中只有一个 store（区别于 flux 的多个 store），在 store 中保存所有的 state，可以把它当成一个封装了 state 的类。而除了对其 dispatch 一个 action 以外无法改变内部的 state。</p>
<p>在实际操作中我们只需要把根部的 reducer 函数传递给 createStore 就可以得到一个 store。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'SOME_ACTION'</span>:</div><div class="line">            <span class="comment">// 一些操作</span></div><div class="line">            <span class="keyword">return</span> newState; <span class="comment">// 返回新状态</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div></pre></td></tr></table></figure>
<p><strong>redux 中提供了这几个 api 操作 store</strong></p>
<h4 id="2-3-1-getState"><a href="#2-3-1-getState" class="headerlink" title="2.3.1. getState"></a>2.3.1. getState</h4><p>返回当前的整个 state 树。</p>
<h4 id="2-3-2-dispatch-action"><a href="#2-3-2-dispatch-action" class="headerlink" title="2.3.2. dispatch(action)"></a>2.3.2. dispatch(action)</h4><p>分发 action 给对应的 reducer。</p>
<p>该函数会调用 getState() 和传入的 action 以【同步】的方式调用 store 的 reduce 函数，然后返回新的 state。从而 state 得到了更新，并且变化监听器（change listener）会被触发。（对于异步操作则将其放到了 action creator 这个步骤）</p>
<h4 id="2-3-3-subscribe-listener"><a href="#2-3-3-subscribe-listener" class="headerlink" title="2.3.3. subscribe(listener)"></a>2.3.3. subscribe(listener)</h4><p>为 store 添加一个变化监听器，每当 dispatch 的时候就会执行，你可以在 listener（回调函数）中使用 getState() 来得到当前的 state。</p>
<p>这个 api 设计的挺有意思，它会返回一个函数，而你执行这个函数后就可以取消订阅。</p>
<h4 id="2-3-4-replaceReducer-nextReducer"><a href="#2-3-4-replaceReducer-nextReducer" class="headerlink" title="2.3.4. replaceReducer(nextReducer)"></a>2.3.4. replaceReducer(nextReducer)</h4><p>替换 store 当前用来计算 state 的 reducer。</p>
<p>这是一个高级 API。只有在你需要实现代码分隔，而且需要立即加载一些 reducer 的时候才可能会用到它。在实现 Redux 热加载机制的时候也可能会用到。</p>
<h3 id="2-4-createStore"><a href="#2-4-createStore" class="headerlink" title="2.4. createStore"></a>2.4. createStore</h3><p>忽略各种类型判断，实现一个最简的 createStore 可以用以下代码。<a href="https://egghead.io/lessons/javascript-redux-implementing-store-from-scratch" target="_blank" rel="external">参考资料</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> state;</div><div class="line">    <span class="keyword">let</span> listeners = [];</div><div class="line"></div><div class="line">    <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">        state = reducer(state, action); <span class="comment">// 调用 reducer</span></div><div class="line">        listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener()); <span class="comment">// 调用所有变化监听器</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">        listeners.push(listener);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// 返回解除监听函数</span></div><div class="line">            listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dispatch(&#123;&#125;); <span class="comment">// 初始化</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="2-5-计数器例子"><a href="#2-5-计数器例子" class="headerlink" title="2.5. 计数器例子"></a>2.5. 计数器例子</h3><ul>
<li><p>纯 JavaScript 不涉及界面（可以在右侧 console 中尝试 store.dispatch）</p>
<iframe src="http://jsbin.com/kejezih/edit?js,console" width="100%" height="600" frameborder="0" allowfullscreen></iframe>
</li>
<li><p>增加界面</p>
<iframe src="http://jsbin.com/jihara/edit?html,js,output" width="100%" height="600" frameborder="0" allowfullscreen></iframe>
</li>
</ul>
<h2 id="三、与-React-进行结合"><a href="#三、与-React-进行结合" class="headerlink" title="三、与 React 进行结合"></a>三、与 React 进行结合</h2><h3 id="3-1-通过-script-标签导入-react"><a href="#3-1-通过-script-标签导入-react" class="headerlink" title="3.1. 通过 script 标签导入 react"></a>3.1. 通过 script 标签导入 react</h3><p>实现同样功能的 Counter</p>
<iframe src="http://jsbin.com/qalevu/edit?html,js,output" width="100%" height="800" frameborder="0" allowfullscreen></iframe>
<h3 id="3-2-用-Redux-和-React-实现-TodoApp"><a href="#3-2-用-Redux-和-React-实现-TodoApp" class="headerlink" title="3.2. 用 Redux 和 React 实现 TodoApp"></a>3.2. 用 Redux 和 React 实现 TodoApp</h3><p>在添加 react-redux 之前，为了体会下 react-redux 的作用，首先来实现一个比计数器更复杂一点儿的 TodoApp 栗子~</p>
<h4 id="3-2-1-分析与设计"><a href="#3-2-1-分析与设计" class="headerlink" title="3.2.1. 分析与设计"></a>3.2.1. 分析与设计</h4><h5 id="1-容器组件-V-S-展示组件"><a href="#1-容器组件-V-S-展示组件" class="headerlink" title="1. 容器组件 V.S. 展示组件"></a>1. 容器组件 V.S. 展示组件</h5><p><strong>组件一般分为</strong></p>
<ul>
<li>容器组件（Smart/Container Components）</li>
<li>展示组件（Dumb/Presentational Components）</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>容器组件</th>
<th>展示组件</th>
</tr>
</thead>
<tbody>
<tr>
<td>Location</td>
<td>最顶层，路由处理</td>
<td>中间和子组件</td>
</tr>
<tr>
<td>Aware of Redux</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>读取数据</td>
<td>从 Redux 获取 state</td>
<td>从 props 获取数据</td>
</tr>
<tr>
<td>修改数据</td>
<td>向 Redux 派发 actions</td>
<td>从 props 调用回调函数</td>
</tr>
</tbody>
</table>
<p>最佳实践一般是由容器组件负责一些数据的获取，进行 dispatch 等操作。而展示组件组件不应该关心逻辑，所有数据都通过 props 传入。</p>
<p>这样才能达到展示组件可以在多处复用，在具体复用时就是通过容器组件将其包装，为其提供所需的各种数据。</p>
<h5 id="2-应用设计"><a href="#2-应用设计" class="headerlink" title="2. 应用设计"></a>2. 应用设计</h5><ul>
<li><p>一个 TodoApp 包含了三个部分：</p>
<ul>
<li>顶部的 AddTodo 输入部分</li>
<li>中间的 TodoList 展示部分</li>
<li>底部的 Footer 过滤部分</li>
</ul>
</li>
<li><p>State 应该包含：</p>
<ul>
<li>filter：过滤 todos 的条件<ul>
<li>SHOW_ALL</li>
<li>SHOW_ACTIVE</li>
<li>SHOW_COMPLETED</li>
</ul>
</li>
<li>todos：所有的 todo<ul>
<li>todo：包含 id、text 和 completed</li>
</ul>
</li>
</ul>
</li>
<li><p>然而传到应用中的 props 只需要：</p>
<ul>
<li>visibleTodos：过滤后的 todos</li>
<li>filter：过滤条件</li>
</ul>
</li>
<li><p>Action 应该有三种：</p>
<ul>
<li>ADD_TODO</li>
<li>TOGGLE_TODO</li>
<li>SET_VISIBILITY_FILTER</li>
</ul>
</li>
</ul>
<h4 id="3-2-2-编码实现"><a href="#3-2-2-编码实现" class="headerlink" title="3.2.2. 编码实现"></a>3.2.2. 编码实现</h4><h5 id="1-action-部分"><a href="#1-action-部分" class="headerlink" title="1. action 部分"></a>1. action 部分</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 暂且使用数字作为 id</span></div><div class="line"><span class="keyword">let</span> nextTodoId = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/*-- action creators --*/</span></div><div class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> (</div><div class="line">    &#123; <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>, <span class="attr">id</span>: nextTodoId++, text &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> toggleTodo = <span class="function">(<span class="params">id</span>) =&gt;</span> (</div><div class="line">    &#123; <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>, id &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> setVisibilityFilter = <span class="function">(<span class="params">filter</span>) =&gt;</span> (</div><div class="line">    &#123; <span class="attr">type</span>: <span class="string">'SET_VISIBILITY_FILTER'</span>, filter &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="2-reducer-部分"><a href="#2-reducer-部分" class="headerlink" title="2. reducer 部分"></a>2. reducer 部分</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认初始状态</span></div><div class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">filter</span>: <span class="string">'SHOW_ALL'</span>, <span class="attr">todos</span>: [] &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rootReducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">            <span class="comment">// 对象解构</span></div><div class="line">            <span class="keyword">const</span> &#123; id, text &#125; = action;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">todos</span>: [</div><div class="line">                    ...state.todos,</div><div class="line">                    &#123; id, text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">                ],</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">todos</span>: state.todos.map(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (todo.id !== action.id) <span class="keyword">return</span> todo;</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> &#123;</div><div class="line">                        ...todo,</div><div class="line">                        <span class="attr">completed</span>: !todo.completed,</div><div class="line">                    &#125;;</div><div class="line">                &#125;),</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>:</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">filter</span>: action.filter,</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意!</p>
<ol>
<li>不要直接修改原有的 state，而是返回一个新的 state。可以使用 Object.assign() 新建一个新的 state。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对 ES7 提案对象展开运算符的支持, 从而使用 { …state, …newState } 达到相同的目的。</li>
<li>在 default 的情况下返回旧的 state，用来兼容遇到未知的 action 这样的错误。</li>
</ol>
</blockquote>
<p><strong>拆分 reducer</strong><br>目前代码看着比较冗长，其实在逻辑上 todos 的处理和 filter 的处理应该分开，所以在 state 没有互相耦合时，可以将其拆分，从而让 reducer 精细地对于对应 state 的子树进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 处理单个 todo</span></div><div class="line"><span class="keyword">const</span> todoReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">id</span>: action.id,</div><div class="line">                <span class="attr">text</span>: action.text,</div><div class="line">                <span class="attr">completed</span>: <span class="literal">false</span>,</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">            <span class="keyword">if</span> (state.id !== action.id) <span class="keyword">return</span> state;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                ...state,</div><div class="line">                <span class="attr">completed</span>: !state.completed,</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 处理 todos</span></div><div class="line"><span class="keyword">const</span> todosReducer = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">            <span class="keyword">return</span> [</div><div class="line">                ...state,</div><div class="line">                todoReducer(<span class="literal">undefined</span>, action),</div><div class="line">            ];</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">            <span class="keyword">return</span> state.map(<span class="function"><span class="params">t</span> =&gt;</span> todoReducer(t, action));</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 处理 filter</span></div><div class="line"><span class="keyword">const</span> filterReducer = <span class="function">(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>:</div><div class="line">            <span class="keyword">return</span> action.filter;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">todos</span>: todosReducer(state.todos, action),</div><div class="line">    <span class="attr">filter</span>: filterReducer(state.filter, action),</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意观察最后的 rootReducer 函数，返回的是一个经过各种 reducer 处理过并合并后的新 state。</p>
<p>然鹅，注意这里 <code>todos: todos(state.todos, action),</code> 传入 state.todos，返回的一定也是 todos（因为都是 state 树上的节点）。</p>
<p>所以 redux 提供了很实用的 <code>combineReducers</code> api，用于简化 reducer 的合并。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">todos</span>: todosReducer,</div><div class="line">    <span class="attr">filter</span>: filterReducer,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// initialState 可以作为第二个参数传入</span></div><div class="line"><span class="keyword">const</span> store = createStore(rootReducer, initialState);</div></pre></td></tr></table></figure>
<p>并且如果 reducer 与 state 节点同名的话（即 todosReducer -&gt; todos）还能通过 es6 的语法更进一步地简化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123; todos, filter &#125;);</div><div class="line"></div><div class="line"><span class="comment">// initialState 可以作为第二个参数传入</span></div><div class="line"><span class="keyword">const</span> store = createStore(rootReducer, initialState);</div></pre></td></tr></table></figure>
<p>随着应用的膨胀，我们还可以将拆分后的 reducer 放到不同的文件中, 以保持其独立性并用于专门处理不同的数据域。</p>
<h5 id="3-view-部分"><a href="#3-view-部分" class="headerlink" title="3. view 部分"></a>3. view 部分</h5><h6 id="1-只有根组件"><a href="#1-只有根组件" class="headerlink" title="1. 只有根组件"></a>1. 只有根组件</h6><p>首先只写一个根组件 <code>&lt;TodoApp /&gt;</code>，store 通过 props 传入 TodoApp，并在生命周期的 componentDidMount 和 componentWillUnmount 时分别订阅与取消订阅。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// 订阅 store 的变化</span></div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.unsubscribe = store.subscribe(</div><div class="line">            <span class="keyword">this</span>.forceUpdate.bind(<span class="keyword">this</span>)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 取消订阅</span></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        <span class="keyword">this</span>.unsubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 渲染单个 todo</span></div><div class="line">    _renderTodo(todo) &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;li</div><div class="line">                key=&#123;todo.id&#125;</div><div class="line">                onClick=&#123;() =&gt; store.dispatch(toggleTodo(todo.id))&#125;</div><div class="line">                style=&#123;&#123;</div><div class="line">                    textDecoration: todo.completed</div><div class="line">                        ? 'line-through'</div><div class="line">                        : 'none',</div><div class="line">                    cursor: todo.completed</div><div class="line">                        ? 'default'</div><div class="line">                        : 'pointer',</div><div class="line">                &#125;&#125;</div><div class="line">            &gt;</div><div class="line">                &#123;todo.text&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据当前 filter 是否匹配，返回字符串或是 a 链接</span></div><div class="line">    _renderFilter(renderFilter, name) &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">const</span> &#123; filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (renderFilter === filter) <span class="keyword">return</span> name;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href='#' onClick=&#123;e =&gt; &#123;</div><div class="line">                e.preventDefault();</div><div class="line">                store.dispatch(setVisibilityFilter(renderFilter))</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                &#123;name&#125;</div><div class="line">            &lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据当前 filter 过滤需要渲染的 todos</span></div><div class="line">    _getVisibleTodos(todos, filter) &#123;</div><div class="line">        <span class="keyword">switch</span> (filter) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</div><div class="line">                <span class="keyword">return</span> todos;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">                <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed);</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">                <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.completed);</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> todos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">const</span> &#123; todos, filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="keyword">let</span> input;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &#123;/* AddTodo */&#125;</div><div class="line">                &lt;input type="text" ref=&#123;node =&gt; input = node&#125; /&gt;</div><div class="line">                &lt;button onClick=&#123;() =&gt; &#123;</div><div class="line">                    if (!input.value) return;</div><div class="line"></div><div class="line">                    store.dispatch(addTodo(input.value));</div><div class="line">                    input.value = '';</div><div class="line">                &#125;&#125;&gt;</div><div class="line">                    addTodo</div><div class="line">                &lt;/button&gt;</div><div class="line"></div><div class="line">                &#123;/* TodoList */&#125;</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &#123;this._getVisibleTodos(todos, filter)</div><div class="line">                        .map(this._renderTodo.bind(this))</div><div class="line">                    &#125;</div><div class="line">                &lt;/ul&gt;</div><div class="line"></div><div class="line">                &#123;/* Footer */&#125;</div><div class="line">                &lt;p&gt;</div><div class="line">                    Show:</div><div class="line">                    &#123;' '&#125;</div><div class="line">                    &#123;this._renderFilter('SHOW_ALL', 'all')&#125;</div><div class="line">                    &#123;', '&#125;</div><div class="line">                    &#123;this._renderFilter('SHOW_COMPLETED', 'completed')&#125;</div><div class="line">                    &#123;', '&#125;</div><div class="line">                    &#123;this._renderFilter('SHOW_ACTIVE', 'active')&#125;</div><div class="line">                &lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>TodoApp 只有根组件</strong><br><iframe src="http://jsbin.com/bodise/edit?js,output" width="100%" height="800" frameborder="0" allowfullscreen></iframe></p>
<h6 id="2-组件拆分"><a href="#2-组件拆分" class="headerlink" title="2. 组件拆分"></a>2. 组件拆分</h6><p>将所有界面内容全写在 TodoApp 中实在是太臃肿了，接下来根据之前的分析结果将其分为以下子组件（全是展示组件）</p>
<ul>
<li>AddTodo</li>
<li>TodoList<ul>
<li>Todo</li>
</ul>
</li>
<li>Footer<ul>
<li>FilterLink</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> AddTodo = <span class="function">(<span class="params">&#123; onAddClick &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> input;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;input type="text" ref=&#123;node =&gt; input = node&#125; /&gt;</div><div class="line">            &lt;button onClick=&#123;() =&gt; &#123;</div><div class="line">                onAddClick(input.value);</div><div class="line">                input.value = '';</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                addTodo</div><div class="line">            &lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const Todo = (&#123; text, onClick, completed &#125;) =&gt; (</div><div class="line">    &lt;li</div><div class="line">        onClick=&#123;onClick&#125;</div><div class="line">        style=&#123;&#123;</div><div class="line">            textDecoration: completed</div><div class="line">                ? 'line-through'</div><div class="line">                : 'none',</div><div class="line">            cursor: completed</div><div class="line">                ? 'default'</div><div class="line">                : 'pointer',</div><div class="line">        &#125;&#125;</div><div class="line">    &gt;</div><div class="line">        &#123;text&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const TodoList = (&#123; todos, onTodoClick &#125;) =&gt; (</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;todos.map(todo =&gt;</div><div class="line">            &lt;Todo</div><div class="line">                key=&#123;todo.id&#125;</div><div class="line">                &#123;...todo&#125;</div><div class="line">                onClick=&#123;() =&gt; onTodoClick(todo.id)&#125;</div><div class="line">            /&gt;</div><div class="line">        )&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const FilterLink = (&#123; filter, onClick, renderFilter, children &#125;) =&gt; &#123;</div><div class="line">    if (renderFilter === filter) return (&lt;span&gt;&#123;children&#125;&lt;/span&gt;);</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;a href='#' onClick=&#123;e =&gt; &#123;</div><div class="line">            e.preventDefault();</div><div class="line">            onClick(renderFilter);</div><div class="line">        &#125;&#125;&gt;</div><div class="line">            &#123;children&#125;</div><div class="line">        &lt;/a&gt;</div><div class="line">    );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const Footer = (&#123; filter, onFilterClick &#125;) =&gt; (</div><div class="line">    &lt;p&gt;</div><div class="line">        Show:</div><div class="line">        &#123;' '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            filter=&#123;filter&#125;</div><div class="line">            renderFilter="SHOW_ALL"</div><div class="line">            onClick=&#123;onFilterClick&#125;</div><div class="line">        &gt;</div><div class="line">            all</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            filter=&#123;filter&#125;</div><div class="line">            renderFilter="SHOW_COMPLETED"</div><div class="line">            onClick=&#123;onFilterClick&#125;</div><div class="line">        &gt;</div><div class="line">            completed</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            filter=&#123;filter&#125;</div><div class="line">            renderFilter="SHOW_ACTIVE"</div><div class="line">            onClick=&#123;onFilterClick&#125;</div><div class="line">        &gt;</div><div class="line">            active</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>所以 TodoApp 精简后是这样~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">const</span> &#123; todos, filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;AddTodo</div><div class="line">                    onAddClick=&#123;text =&gt; &#123;</div><div class="line">                        if (!text) return;</div><div class="line"></div><div class="line">                        store.dispatch(addTodo(text));</div><div class="line">                    &#125;&#125;</div><div class="line">                /&gt;</div><div class="line"></div><div class="line">                &lt;TodoList</div><div class="line">                    todos=&#123;this._getVisibleTodos(todos, filter)&#125;</div><div class="line">                    onTodoClick=&#123;id =&gt; store.dispatch(toggleTodo(id))&#125;</div><div class="line">                /&gt;</div><div class="line"></div><div class="line">                &lt;Footer</div><div class="line">                    filter=&#123;filter&#125;</div><div class="line">                    onFilterClick=&#123;filter =&gt; &#123;</div><div class="line">                        store.dispatch(setVisibilityFilter(filter));</div><div class="line">                    &#125;&#125;</div><div class="line">                /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="3-增加容器组件"><a href="#3-增加容器组件" class="headerlink" title="3. 增加容器组件"></a>3. 增加容器组件</h6><p>现在我们仍然是以 TodoApp 作为容器组件，其中各个子组件都是展示组件。</p>
<p>但是这样做的话一旦子组件需要某个属性，就需要从根组件层层传递下来，比如 FilterLink 中的 filter 属性。</p>
<p>所以下面我们增加容器组件，让展示组件通过容器组件获得所需属性。</p>
<ul>
<li>AddTodo(container)</li>
<li>VisibleTodoList(container)<ul>
<li>TodoList<ul>
<li>Todo</li>
</ul>
</li>
</ul>
</li>
<li>Footer<ul>
<li>FilterLink(container)<ul>
<li>Link</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store.dispatch 又被放回来了，</span></div><div class="line"><span class="comment">// 因为暂时我们只在 AddTodo 组件中使用 addTodo 这个 action</span></div><div class="line"><span class="comment">// 以后增加了新的 form 之后可以考虑再将 store.dispatch 移出去</span></div><div class="line"><span class="keyword">const</span> AddTodo = <span class="function">(<span class="params">&#123; store &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> input;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;input type="text" ref=&#123;node =&gt; input = node&#125; /&gt;</div><div class="line">            &lt;button onClick=&#123;() =&gt; &#123;</div><div class="line">                if (!input.value) return;</div><div class="line"></div><div class="line">                store.dispatch(addTodo(input.value));</div><div class="line">                input.value = '';</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                addTodo</div><div class="line">            &lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const Todo = (&#123; text, onClick, completed &#125;) =&gt; (</div><div class="line">    &lt;li</div><div class="line">        onClick=&#123;onClick&#125;</div><div class="line">        style=&#123;&#123;</div><div class="line">            textDecoration: completed</div><div class="line">                ? 'line-through'</div><div class="line">                : 'none',</div><div class="line">            cursor: completed</div><div class="line">                ? 'default'</div><div class="line">                : 'pointer',</div><div class="line">        &#125;&#125;</div><div class="line">    &gt;</div><div class="line">        &#123;text&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const TodoList = (&#123; todos, onTodoClick &#125;) =&gt; (</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;todos.map(todo =&gt;</div><div class="line">            &lt;Todo</div><div class="line">                key=&#123;todo.id&#125;</div><div class="line">                &#123;...todo&#125;</div><div class="line">                onClick=&#123;() =&gt; onTodoClick(todo.id)&#125;</div><div class="line">            /&gt;</div><div class="line">        )&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">);</div><div class="line"></div><div class="line">// 容器组件</div><div class="line">class VisibleTodoList extends Component &#123;</div><div class="line">    // 订阅 store 的变化</div><div class="line">    componentDidMount() &#123;</div><div class="line">        const &#123; store &#125; = this.props;</div><div class="line"></div><div class="line">        this.unsubscribe = store.subscribe(</div><div class="line">            this.forceUpdate.bind(this)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 取消订阅</div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        this.unsubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据当前 filter 过滤需要渲染的 todos</div><div class="line">    _getVisibleTodos(todos, filter) &#123;</div><div class="line">        switch (filter) &#123;</div><div class="line">            case 'SHOW_ALL':</div><div class="line">                return todos;</div><div class="line"></div><div class="line">            case 'SHOW_COMPLETED':</div><div class="line">                return todos.filter(todo =&gt; todo.completed);</div><div class="line"></div><div class="line">            case 'SHOW_ACTIVE':</div><div class="line">                return todos.filter(todo =&gt; !todo.completed);</div><div class="line"></div><div class="line">            default:</div><div class="line">                return todos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; store &#125; = this.props;</div><div class="line">        const &#123; todos, filter &#125; = store.getState();</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;TodoList</div><div class="line">                todos=&#123;this._getVisibleTodos(todos, filter)&#125;</div><div class="line">                onTodoClick=&#123;id =&gt; &#123;</div><div class="line">                    store.dispatch(toggleTodo(id))</div><div class="line">                &#125;&#125;</div><div class="line">            /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 原本的 FilterLink 改成 Link，去掉 filter 和 renderFilter 属性，改为传入 active</div><div class="line">const Link = (&#123; active, onClick, children &#125;) =&gt; &#123;</div><div class="line">    if (active) return (&lt;span&gt;&#123;children&#125;&lt;/span&gt;);</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;a href='#' onClick=&#123;e =&gt; &#123;</div><div class="line">            e.preventDefault();</div><div class="line">            onClick();</div><div class="line">        &#125;&#125;&gt;</div><div class="line">            &#123;children&#125;</div><div class="line">        &lt;/a&gt;</div><div class="line">    );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 容器组件</div><div class="line">class FilterLink extends Component &#123;</div><div class="line">    // 订阅 store 的变化</div><div class="line">    componentDidMount() &#123;</div><div class="line">        const &#123; store &#125; = this.props;</div><div class="line"></div><div class="line">        this.unsubscribe = store.subscribe(</div><div class="line">            this.forceUpdate.bind(this)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 取消订阅</div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        this.unsubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; store, renderFilter, children &#125; = this.props;</div><div class="line">        const &#123; filter &#125; = store.getState();</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;Link</div><div class="line">                active=&#123;filter === renderFilter&#125;</div><div class="line">                onClick=&#123;() =&gt; store.dispatch(</div><div class="line">                    setVisibilityFilter(renderFilter)</div><div class="line">                )&#125;</div><div class="line">            &gt;</div><div class="line">                &#123;children&#125;</div><div class="line">            &lt;/Link&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 展示组件</div><div class="line">const Footer = (&#123; store &#125;) =&gt; (</div><div class="line">    &lt;p&gt;</div><div class="line">        Show:</div><div class="line">        &#123;' '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            store=&#123;store&#125;</div><div class="line">            renderFilter="SHOW_ALL"</div><div class="line">        &gt;</div><div class="line">            all</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            store=&#123;store&#125;</div><div class="line">            renderFilter="SHOW_COMPLETED"</div><div class="line">        &gt;</div><div class="line">            completed</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink</div><div class="line">            store=&#123;store&#125;</div><div class="line">            renderFilter="SHOW_ACTIVE"</div><div class="line">        &gt;</div><div class="line">            active</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">);</div><div class="line"></div><div class="line">// 在不使用全局变量 store 的情况下，</div><div class="line">// 暂时只能通过 props 传递进来，</div><div class="line">// Don't worry~很快就不会这么麻烦了~</div><div class="line">const TodoApp = (&#123; store &#125;) =&gt; (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;AddTodo store=&#123;store&#125; /&gt;</div><div class="line">        &lt;VisibleTodoList store=&#123;store&#125; /&gt;</div><div class="line">        &lt;Footer store=&#123;store&#125; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>通过观察重构后的代码可以发现有三点麻烦的地方</strong></p>
<ol>
<li>根组件需要通过 props 将 store 传给各个子组件</li>
<li>容器组件都要定义 componentDidMount 进行订阅和 componentWillUnmount 取消订阅</li>
<li>应用其实并不需要渲染所有的 todos，所以内部很麻烦地定义了 <code>_getVisibleTodos</code> 函数</li>
</ol>
<h6 id="4-Provider"><a href="#4-Provider" class="headerlink" title="4. Provider"></a>4. Provider</h6><p>让我们先来解决第一个麻烦~，利用 React 提供的 <a href="http://facebook.github.io/react/docs/context.html" target="_blank" rel="external">context 特性</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// 通过该方法向 children 的 context 注入 store</span></div><div class="line">    getChildContext() &#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">store</span>: <span class="keyword">this</span>.props.store &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 必须要声明传入 context 的 store 的类型</span></div><div class="line">Provider.childContextTypes = &#123;</div><div class="line">    <span class="attr">store</span>: React.PropTypes.object,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>自顶向下地看一下如何使用到 TodoApp 中</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 使用 Provider 包裹 TodoApp，并将 store 作为 props 传入</span></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Provider store=&#123;createStore(rootReducer, initialState)&#125;&gt;</div><div class="line">        &lt;TodoApp /&gt;</div><div class="line">    &lt;/Provider&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>),</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 2. 根组件 TodoApp: 和 store say goodbye~，</span></div><div class="line"><span class="comment">// 因为 TodoApp 并不是容器组件~</span></div><div class="line"><span class="keyword">const</span> TodoApp = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;AddTodo /&gt;</div><div class="line">        &lt;VisibleTodoList /&gt;</div><div class="line">        &lt;Footer /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 3. AddTodo: 由于 props 固定作为第一个传入子组件的参数，</span></div><div class="line"><span class="comment">// 所以 &#123; store &#125; 要声明在第二位，然鹅需要声明 contextTypes...</span></div><div class="line"><span class="keyword">const</span> AddTodo = <span class="function">(<span class="params">props, &#123; store &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 必须声明</span></div><div class="line">AddTodo.contextTypes = &#123;</div><div class="line">    <span class="attr">store</span>: React.PropTypes.object,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 4. VisibleTodoList: 从 props 改成从 context 中获取 store，</span></div><div class="line"><span class="comment">// 同样声明 contextTypes...</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisibleTodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// 订阅 store 的变化</span></div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context; <span class="comment">// props -&gt; context</span></div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context; <span class="comment">// props -&gt; context</span></div><div class="line">        <span class="keyword">const</span> &#123; todos, filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 必须声明</span></div><div class="line">VisibleTodoList.contextTypes = &#123;</div><div class="line">    <span class="attr">store</span>: React.PropTypes.object,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// -- TodoList 和 Todo 不变 --</span></div><div class="line"></div><div class="line"><span class="comment">// 5. Footer：和 store say goodbye...</span></div><div class="line"><span class="keyword">const</span> Footer = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">    &lt;p&gt;</div><div class="line">        Show:</div><div class="line">        &#123;' '&#125;</div><div class="line">        &lt;FilterLink renderFilter="SHOW_ALL"&gt;</div><div class="line">            all</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink renderFilter="SHOW_COMPLETED"&gt;</div><div class="line">            completed</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">        &#123;', '&#125;</div><div class="line">        &lt;FilterLink renderFilter="SHOW_ACTIVE"&gt;</div><div class="line">            active</div><div class="line">        &lt;/FilterLink&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 6. FilterLink: 同 VisibleTodoList（props + contextTypes...）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterLink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// 订阅 store 的变化</span></div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context; <span class="comment">// props -&gt; context</span></div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; renderFilter, children &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context; <span class="comment">// props -&gt; context</span></div><div class="line">        <span class="keyword">const</span> &#123; filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 必须声明</span></div><div class="line">FilterLink.contextTypes = &#123;</div><div class="line">    <span class="attr">store</span>: React.PropTypes.object,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// -- Link 不变 --</span></div></pre></td></tr></table></figure>
<p><strong>现在中间的非容器组件完全不用为了自己的孩子而费劲地传递 store={store}</strong><br>所以以上我们就实现了简化版的由 react-redux 提供的第一个组件 <code>&lt;Provider /&gt;</code>。</p>
<p>然鹅，有木有觉得老写 contextTypes 好烦啊，而且 context 特性并不稳定，所以 context 并不应该直接写在我们的应用代码里。</p>
<blockquote>
<p>计将安出？</p>
</blockquote>
<h6 id="5-connect"><a href="#5-connect" class="headerlink" title="5. connect"></a>5. connect</h6><ul>
<li>OOP思维：这还不简单？写个函数把容器组件传进去作为父类，然后返回写好了 componentDidMount，componentWillUnmount 和 contextTypes 的子类不就好啦~</li>
</ul>
<p>恭喜你~面向对象的思想学的很不错~</p>
<p>虽然 JavaScript 底层各种东西都是面向对象，然而在前端一旦与界面相关，照搬面向对象的方法实现起来会很麻烦…</p>
<ul>
<li>React 早期用户：这还不简单？写个 mixin 岂不美哉~~？</li>
</ul>
<p>作为 react 亲生的 mixin 确实在多组件间共享方法提供了一些便利，然而使用 mixin 的组件需要了解细节，从而避免状态污染，所以一旦 mixin 数量多了之后会越来越难维护。</p>
<blockquote>
<p>Unfortunately, we will not launch any mixin support for ES6 classes in React. That would defeat the purpose of only using idiomatic JavaScript concepts.</p>
</blockquote>
<p>所以官方也放弃了在 ES6 class 中对 mixin 的支持。</p>
<ul>
<li>函数式（FP）：高阶组件 High Order Component（下称 hoc）才是终极解决方案~~</li>
</ul>
<blockquote>
<p>hocFactory:: W: React.Component =&gt; E: React.Component</p>
</blockquote>
<p>如上所示 hoc 的构造函数接收一个 W（代表 WrappedComponent）返回一个 E（代表 Enhanced Component），而 E 就是这个高阶组件。</p>
<p>假设我们有一个旧组件 Comp，然鹅现在接收参数有些变动。</p>
<p>当然你可以复制粘贴再修改旧组件的代码…（大侠受窝一拜）</p>
<p>也可以这么写，返回一个新组件来包裹旧组件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewComp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    mapProps(props) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;<span class="comment">/* new props */</span>&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (&lt;Comp &#123;...this.mapProps(this.props)&#125; /&gt;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然鹅，如果有同样逻辑的更多的组件需要适配呢？？？总不能有几个抄几遍吧…</p>
<p><strong>所以骚年你听说过高阶组件么~？</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先返回一个函数，而那个函数再返回新组件</span></div><div class="line"><span class="keyword">const</span> mapProps = <span class="function"><span class="params">mapFn</span> =&gt;</span> Comp =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">        render() &#123;</div><div class="line">            <span class="keyword">return</span> (&lt;Comp &#123;...this.mapFn(this.props)&#125; /&gt;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const NewComp = mapProps(mapFn)(Comp); // 注意调用了两次</div></pre></td></tr></table></figure>
<p>可以看到借助高阶组件我们将 mapFn 和 Comp 解耦合，这样就算需要再嵌套多少修改逻辑都没问题<del>~天黑都不怕</del>~</p>
<p><strong>ok，扯了这么多的淡，终于要说到 connect 了</strong><br>是哒，你木有猜错，react-redux 提供的第二个也是最后一个 api —— connect 返回的就是一个高阶组件。</p>
<p>使用的时候只需要 <code>connect()(WrappedComponent)</code> 返回的 component 自动就完成了在 componentDidMount 中订阅 store，在 componentWillUnmount 中取消订阅和声明 contextTypes。</p>
<p><strong>这样就只剩下最后一个麻烦</strong></p>
<blockquote>
<p>3.应用其实并不需要渲染所有的 todos，所以内部很麻烦地定义了 <code>_getVisibleTodos</code> 函数</p>
</blockquote>
<p>其实 connect 函数的第一个参数叫做 mapStateToProps，作用就是将 store 中的数据提前处理或过滤后作为 props 传入内部组件，以便内部组件高效地直接调用。这样最后一个麻烦也解决了~</p>
<p><strong>然鹅，我们问自己这样就够了么？并没有…</strong></p>
<p>还有最后一个细节，以 FilterLink 为例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterLink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; store, renderFilter, children &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">const</span> &#123; filter &#125; = store.getState();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Link</div><div class="line">                active=&#123;filter === renderFilter&#125;</div><div class="line">                onClick=&#123;() =&gt; store.dispatch(</div><div class="line">                    setVisibilityFilter(renderFilter)</div><div class="line">                )&#125;</div><div class="line">            &gt;</div><div class="line">                &#123;children&#125;</div><div class="line">            &lt;/Link&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了从 store 中获取数据（filter），我们还从中获取了 dispatch，以便触发 action。如果将回调函数 onClick 的内容也加到 props 中，那么借助 connect 整个 FilterLink 的逻辑岂不是都被我们抽象完了？</p>
<p>是哒，connect 的第二个参数叫做 mapDispatchToProps，作用就是将各个调用到 dispatch 的地方都抽象成函数加到 props 中的传给内部组件。这样最后一个麻烦终于真的被解决了~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mapStateToLinkProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="comment">// ownProps 是原组件的 props，</span></div><div class="line">    <span class="comment">// 这里为了和高阶组件的 props 区分</span></div><div class="line">    active: ownProps.renderFilter === state.filter,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapDispatchToLinkProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> (&#123;</div><div class="line">    onClick() &#123;</div><div class="line">        dispatch(</div><div class="line">            setVisibilityFilter(ownProps.renderFilter)</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 注意原 FilterLink 整个都被我们删了</span></div><div class="line"><span class="keyword">const</span> FilterLink = connect(</div><div class="line">    mapStateToLinkProps,</div><div class="line">    mapDispatchToLinkProps</div><div class="line">)(Link);</div></pre></td></tr></table></figure>
<p><strong>TodoApp 使用 react-redux</strong><br><iframe src="http://jsbin.com/fumihi/edit?js,output" width="100%" height="800" frameborder="0" allowfullscreen></iframe></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文从 Redux 的理论基础和源码出发，介绍了 Redux 的各项基础 api。</p>
<p>接着一步一步地介绍如何与 React 进行结合，从过程中的各个痛点引出 react-redux 的作用和原理。</p>
<p>然鹅，还有好多的坑没填，比如：大型项目的文件结构、前端路由（react-router）、中间件（middlewares）、网络请求等各类异步操作、服务器端同构直出…</p>
<p>以上 to be continued…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、环境搭建&quot;&gt;&lt;a href=&quot;#零、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;零、环境搭建&quot;&gt;&lt;/a&gt;零、环境搭建&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://red
    
    </summary>
    
      <category term="前端" scheme="https://buptsteve.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://buptsteve.github.io/blog/tags/JavaScript/"/>
    
      <category term="Redux" scheme="https://buptsteve.github.io/blog/tags/Redux/"/>
    
      <category term="React" scheme="https://buptsteve.github.io/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>「6」JavaScript 函数表达式学习笔记</title>
    <link href="https://buptsteve.github.io/blog/2016/03/23/6.js-function-chapter7/"/>
    <id>https://buptsteve.github.io/blog/2016/03/23/6.js-function-chapter7/</id>
    <published>2016-03-23T07:27:58.000Z</published>
    <updated>2016-10-16T17:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>零、前言</strong><br>《JavaScript 高级程序设计（第三版）》第7章 函数表达式，学习笔记整理。</p>
<blockquote>
<p>主要内容有如下三部分</p>
</blockquote>
<ul>
<li>函数表达式的特征</li>
<li>使用函数实现递归</li>
<li>使用闭包定义私有变量</li>
</ul>
<a id="more"></a>
<h1 id="一、第7章-函数表达式"><a href="#一、第7章-函数表达式" class="headerlink" title="一、第7章 函数表达式"></a>一、第7章 函数表达式</h1><h2 id="7-0-函数定义"><a href="#7-0-函数定义" class="headerlink" title="7.0. 函数定义"></a>7.0. 函数定义</h2><p>在 JavaScript 中定义函数有两种方法：</p>
<ul>
<li>函数声明</li>
<li>函数表达式</li>
</ul>
<h3 id="7-0-1-函数声明"><a href="#7-0-1-函数声明" class="headerlink" title="7.0.1. 函数声明"></a>7.0.1. 函数声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</div><div class="line">  <span class="comment">// 函数体</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 只在 Firefox、Safari、Chrome 和 Opera 有效</span></div><div class="line">alert(functionName.name); <span class="comment">// functionName，函数名称</span></div></pre></td></tr></table></figure>
<blockquote>
<p>函数声明一个重要特征就是：函数声明提升（function declaration hoisting），简单来说就是 JS 引擎会在执行阶段之前读取函数声明，这就是我们才能够在函数声明之前就调用它的原因。</p>
</blockquote>
<h3 id="7-0-2-函数表达式"><a href="#7-0-2-函数表达式" class="headerlink" title="7.0.2. 函数表达式"></a>7.0.2. 函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 有多种形式，以下为最常见的一种，即创建一个匿名函数并将其赋值给变量 functionName</span></div><div class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</div><div class="line">  <span class="comment">// 函数体</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 只在 Firefox、Safari、Chrome 和 Opera 有效</span></div><div class="line">alert(functionName.name); <span class="comment">// 空字符串</span></div></pre></td></tr></table></figure>
<p>当然函数表达式就没有声明提升这种特征了。以下是一个比较常见的坑…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 千万别这样做！</span></div><div class="line"><span class="comment">// 因为有的浏览器会返回 first 的这个 function，而有的浏览器返回的却是第二个</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'first'</span>;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'second'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"></div><div class="line"><span class="comment">// 相反，这样情况，我们要用函数表达式</span></div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'first'</span>;</div><div class="line">  &#125;;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'second'</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<h2 id="7-1-递归"><a href="#7-1-递归" class="headerlink" title="7.1. 递归"></a>7.1. 递归</h2><blockquote>
<p>先说个段子：要想理解递归，首先要理解…递归。</p>
</blockquote>
<p>说正经的，递归就是函数自己调用自己。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="comment">// 递归结束条件</span></div><div class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 通过在全局 VO 中，找到自身函数的指针后调用自身</span></div><div class="line">  <span class="keyword">return</span> num * factorial(num<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherFactorial = factorial;</div><div class="line">factorial = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 报错！因为修改了全局 VO 中 factorial 指针的指向（null）</span></div><div class="line">alert(anotherFactorial(<span class="number">4</span>));</div></pre></td></tr></table></figure>
<p>这么写主要问题就是递归函数与自身的函数名耦合，一旦修改了原本的函数名，则会导致错误。</p>
<p>这时可以利用 <code>arguments.callee</code> 指针来成功寻找到正在执行的函数。</p>
<p>接下来又有一个坑：arguments 在严格模式下无法使用。</p>
<p>不过我们可以使用命名函数表达式来完美解决：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> factorial = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="comment">// 递归结束条件</span></div><div class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 函数名 f 只在内部作用域里有效</span></div><div class="line">  <span class="keyword">return</span> num * f(num<span class="number">-1</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> f; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="7-2-闭包"><a href="#7-2-闭包" class="headerlink" title="7.2. 闭包"></a>7.2. 闭包</h2><blockquote>
<p>先下定义：闭包是指【有权】访问（另一个函数作用域）中的「变量」的「函数」。</p>
</blockquote>
<ul>
<li>闭包首先是一个函数</li>
<li>能力就是有权访问变量</li>
<li>范围在另一个函数作用域内</li>
</ul>
<p>我们日常在使用 JavaScript 中，在外部函数中定义的内部函数能够访问外部函数中的变量。</p>
<p>所以，最常见的闭包方式就是在一个函数内部创建并返回另一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg0, arg1</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 内部的 bar 函数能够访问外部函数 foo 的 arg0 和 arg1 变量。</span></div><div class="line">    <span class="keyword">return</span> arg0 + arg1;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = foo(<span class="string">'a'</span>, <span class="string">'b'</span>); <span class="comment">// test 是一个指针，指向返回的 bar 函数</span></div><div class="line">test();                   <span class="comment">// ab，调用闭包后，得到 arg0 + arg1 的值</span></div><div class="line"><span class="keyword">typeof</span> bar;               <span class="comment">// undefined，当然返回的是一个匿名函数</span></div></pre></td></tr></table></figure>
<p><strong>那么内部的 bar 函数是怎么保存外部 foo 函数的两个参数的呢？</strong></p>
<ul>
<li>首先在浏览器端的 JavaScript 代码，有一个全局的执行环境（Execution Context）即 window 对象。</li>
<li>每个执行环境都有一个对应的变量对象（Variable Object）：定义的所有变量和函数都保存其中。</li>
<li>当某个函数被调用时，会创建一个执行环境（EC）及相应的作用域链（Scope Chain）（其实是被推入一个环境栈中，执行之后栈将之弹出）。</li>
<li>作用域链（SC）就是一个指向各个变量对象的指针列表（全局 VO 是其中的最后一个对象）。</li>
<li>一般来说某个执行环境（EC）的所有代码执行完毕后，该环境被销毁，保存其中的所有变量和函数定义也随之销毁。</li>
<li>如果执行环境是一个函数，那么它的变量对象（VO）又叫做活动对象（Activation Object）。</li>
<li>因此在一个函数中解析标识符的过程，类似于上一篇中提到的原型链查找。也是沿着 SC 一级一级地往上找。如果直到全局 VO 还没找到，就会报错。</li>
</ul>
<p>所以接下来举几个栗子：</p>
<h3 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1. 普通函数"></a>1. 普通函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (value1 &lt; value2) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  <span class="keyword">if</span> (value1 &gt; value2) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = compare(<span class="number">5</span>, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">      ______________________________________________________________</div><div class="line">      |                                                             |</div><div class="line">      V                                     _____________________   |           _____________________</div><div class="line"> _________________                    |--&gt; |       global VO     |  |     |---&gt;|     compare AO      |</div><div class="line">|   compare EC    |                   |    |---------------------|  |     |    |---------------------|</div><div class="line">|-------—---------|       _______     |    | compare |      *----|--|     |    | arguments | [5, 10] |</div><div class="line">| Scope Chain | *-|----&gt; |  SC   |    |    |---------------------|        |    |---------------------|</div><div class="line">|-----------------|      |-------|    |    | result  | undefined |        |    | value1    |    5    |</div><div class="line">                         | 1 | *-|----|    |---------------------|        |    |---------------------|</div><div class="line">                         |-------|                                        |    | value2    |   10    |</div><div class="line">                         | 0 | *-|----------------------------------------|    |---------------------|</div><div class="line">                         |-------|</div><div class="line"></div><div class="line">                                           by 灵魂画师...(累死我了)</div></pre></td></tr></table></figure>
<ul>
<li>在创建 compare 函数时，就已经创建一个预先包含全局 VO 的作用域链（保存在内部的 [[Scope]] 属性中）。</li>
<li>在执行 compare 函数时，就创建 EC，然后复制并构建 [[Scope]] 属性中的作用域链 SC</li>
<li>此时创建 compare AO，并将其放入 SC 的顶端。</li>
<li>所以在函数中访问一个变量时，会从作用域顶端（就是 compare AO）开始找起。</li>
<li>所以一般一个函数执行完毕后，因为 AO 被销毁，所以在函数外部无法访问到函数内部的变量。</li>
</ul>
<h4 id="2-闭包示例"><a href="#2-闭包示例" class="headerlink" title="2. 闭包示例"></a>2. 闭包示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompFunc</span>(<span class="params">propName</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1, obj2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value1 = obj1[propName];</div><div class="line">    <span class="keyword">var</span> value2 = obj2[propName];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> compare = createCompFunc(<span class="string">"name"</span>);                   <span class="comment">// 创建函数</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> result = compare(&#123;<span class="attr">name</span>: <span class="string">"steve"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"young"</span>&#125;); <span class="comment">// 调用函数</span></div><div class="line"></div><div class="line">compare = <span class="literal">null</span>;                                         <span class="comment">// 解除对匿名函数的引用（释放内存）</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">          __________________________________________________________________</div><div class="line">          |                                         _____________________   |</div><div class="line">          |                                |-----&gt; |      global VO      |  |</div><div class="line">          |                                |       |---------------------|  |</div><div class="line">          |                                |       | createCompFunc | *--|--|</div><div class="line">          |                                |       |---------------------|</div><div class="line">          V                                |       | result  | undefined |</div><div class="line"> ___________________              _______  |       |---------------------|</div><div class="line">| createCompFunc EC |      |---&gt; |  SC1  | |        ______________________</div><div class="line">|-------—-----------|      |     |-------| | |---&gt; |  createCompFunc AO   |</div><div class="line">| Scope Chain |  *--|------|     | 1 | *-|-| |     |----------------------|</div><div class="line">|-------------------|            |-------| | |     | arguments | [&quot;name&quot;] |</div><div class="line">                                 | 0 | *-|-(-|     |----------------------|</div><div class="line"> ________________________        |-------| | |     | propName  |  &quot;name&quot;  |</div><div class="line">|  anoymous function EC  |                 | |     |----------------------|</div><div class="line">|-------—----------------|        _______  | |      _______________________________</div><div class="line">| Scope Chain |    *-----|-----&gt; |  SC2  | | | |-&gt; |      anoymous function AO     |</div><div class="line">|------------------------|       |-------| | | |   |-------------------------------|</div><div class="line">                                 | 2 | *-|-| | |   | arguments | [&#123;name: &quot;steve&quot;&#125;, |</div><div class="line">                                 |-------|   | |   |           |  &#123;name: &quot;young&quot;&#125;] |</div><div class="line">                                 | 1 | *-|---| |   |-------------------------------|</div><div class="line">                                 |-------|     |   |   obj1    |  &#123;name: &quot;steve&quot;&#125;  |</div><div class="line">                                 | 0 | *-|-----|   |-------------------------------|</div><div class="line">                                 |-------|         |   obj2    |  &#123;name: &quot;young&quot;&#125;  |</div><div class="line">                                                   |-------------------------------|</div><div class="line">                                 by 灵魂画师...(累死我了)</div></pre></td></tr></table></figure>
<ul>
<li>如图所示，首先看全局变量对象（global VO），其中有一个指针指向 createCompFunc 函数，还有一个声明提升后还未计算完毕的 result 等变量。</li>
<li>首先执行外部的 createCompFunc 函数，创建了它的 EC，其中有一个作用域链指针指向它的作用域链 SC1。</li>
<li>那么显然 SC1 中会有两个指针，分别指向 createCompFunc AO 和 global VO（这就是在函数内部能够访问到全局变量的原因）。</li>
<li>在 createCompFunc AO 中存放的就是函数内部定义的变量。</li>
<li>最后来看 createCompFunc 函数内部返回的匿名函数，当然它也有自己的执行环境 EC，也有自己的作用域链 SC2。</li>
<li>只不过由于它是 createCompFunc 函数内部的函数，当然它也能访问外部 createCompFunc 函数定义的变量，这正是因为 SC2 中位于第二的指针指向 createCompFunc AO（这就是闭包的原理）。</li>
<li>更为重要的是，在 createCompFunc 函数执行完毕后，因为匿名函数仍然引用着 createCompFunc AO，所以其活动对象不会被销毁（这涉及到内存回收机制）。</li>
</ul>
<p>从上述讨论我们可以清晰地看出：闭包的原理就是内部的函数仍然引用着外部函数的 AO，使得外部函数的 AO 仍然保存在内存中。所以我们可以通过将闭包设置为 null 来解除对该函数的引用，回收其占用的内存。</p>
<h3 id="7-2-1-闭包与变量"><a href="#7-2-1-闭包与变量" class="headerlink" title="7.2.1. 闭包与变量"></a>7.2.1. 闭包与变量</h3><p>下面我们来简单讨论下作用域链机制的副作用（坑）：闭包只能取得外部函数中任何变量的最后一个值。</p>
<p>先来看一个栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> i; <span class="comment">// 希望保存不同的 i，但是最后 i 都是 10</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = createFunc();</div><div class="line">alert(test[<span class="number">0</span>]()); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>其实很好理解，因为闭包在 SC 中保存的是一个指针而已，外部函数执行完毕后 AO 中的变量自然更新为最后一个值啦╮(╯▽╰)╭。</p>
<p>但是我们可以创建另一个立即执行的匿名函数强制让闭包的行为符合预期：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">      &#125;</div><div class="line">    &#125;(i);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = createFunc();</div><div class="line">alert(test[<span class="number">0</span>]()); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<ul>
<li>在这里我们相当于有3层函数。</li>
<li>中间那层的匿名函数有一个参数 num，我们将 i 传入立即执行。</li>
<li>因为简单类型是按值传递的，所以中间那层的匿名函数的 AO 中 num 保存的是不同的 i。</li>
<li>而最内层的匿名函数读取的正是中间层匿名函数的 AO。</li>
</ul>
<h3 id="7-2-2-关于-this-对象"><a href="#7-2-2-关于-this-对象" class="headerlink" title="7.2.2. 关于 this 对象"></a>7.2.2. 关于 this 对象</h3><p>我们知道，this 是在运行时根据函数的执行环境动态绑定的：</p>
<ul>
<li>在全局函数中，this 等于 window。</li>
<li>而函数被作为某个对象的方法调用时，this 又指向那个对象。</li>
<li>使用 call() 和 apply() 方法时，this 又会指向传入的那个对象（还有 bind()）。</li>
</ul>
<p>不过，匿名函数的执行环境具有全局性，因此内部的 this 通常指向 window，见下例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line"></div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(object.getNameFunc()()); <span class="comment">// The Window (非严格模式下)，此处有两个括号，因为 object.getNameFunc() 是一个匿名函数，后一个括号是匿名函数调用。</span></div></pre></td></tr></table></figure>
<p>为什么匿名函数没有取得其包含作用域（或外部作用域）的 this 对象呢？</p>
<p>前面曾经提到过，每个函数在被调用时都会自动取得两个特殊变量：this 和 arguments。而内部函数在搜索这两个变量时，只会搜索到其 AO 为止，所以永远不能直接访问到外部函数中的 this 和 arguments。</p>
<p>不过若是我们将外部作用域中的 this 对象保存在一个闭包能够访问到的变量里，就可以让闭包访问到该对象了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line"></div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 使用 that 保存外部函数的 this（防止被内部函数的 this 屏蔽）</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> that.name; <span class="comment">// 由于访问的是内部 AO 中没有的变量 that，所以在 SC 中外部的 AO 上搜索，得到外部函数的 this。</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(object.getNameFunc()()); <span class="comment">// My Object</span></div></pre></td></tr></table></figure>
<p>接下来再看几个特殊的栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line"></div><div class="line">  <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">object.getName();   <span class="comment">// My Object，很好理解 this 就是指向 object</span></div><div class="line">(object.getName)(); <span class="comment">// My Object，将函数包了起来，但还是通过 object.getName 调用，this 还是指向 object</span></div><div class="line"></div><div class="line">(object.getName = object.getName)(); <span class="comment">// The Window(非严格模式下)，看起来很奇怪，将函数 getName 赋值为 getName，再调用赋值后的结果</span></div><div class="line"><span class="comment">// 因为赋值表达式操作的是 getName 函数本身，所以 this 的值没有得到维持，调用时指向了 widnow。</span></div></pre></td></tr></table></figure>
<h3 id="7-2-3-内存泄漏"><a href="#7-2-3-内存泄漏" class="headerlink" title="7.2.3. 内存泄漏"></a>7.2.3. 内存泄漏</h3><p>因为 IE9 之前对于 JScript 对象和 COM 对象使用不同的垃圾收集机制。所以如果闭包的作用域中保存一个 HTML 元素，那么该元素将无法被销毁╮(╯▽╰)╭。</p>
<h2 id="7-3-模仿块级作用域"><a href="#7-3-模仿块级作用域" class="headerlink" title="7.3. 模仿块级作用域"></a>7.3. 模仿块级作用域</h2><p>我们都知道在 ES6 之前是木有块级作用域的╮(╯▽╰)╭，在块语句中定义的变量实际上是定义在函数 AO 上的。</p>
<p>如果实在需要块级作用域，可以通过立即执行函数进行模拟。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这只是其中一种写法...重点是不要使用函数声明，这样由于声明提升会报错。</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里是块级作用域</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>在一个大型程序中过多的全局变量和函数很容易造成命名冲突，这样可以有效减少在全局作用域中添加变量和函数。也可以说是模块化的基础。ps jQuery 源码中最外层函数就是这样的一个立即执行函数…</p>
<h2 id="7-4-私有变量"><a href="#7-4-私有变量" class="headerlink" title="7.4. 私有变量"></a>7.4. 私有变量</h2><p>严格来说，JavaScript 中没有私有成员的概念…╮(╯▽╰)╭，不过在任何函数中定义的变量，外部都无法访问到，可以认为是私有变量。</p>
<p>私有变量包括：</p>
<ul>
<li>函数的参数</li>
<li>局部变量</li>
<li>内部定义的其他函数</li>
</ul>
<p><strong>那么如果我们需要访问这些私有变量该怎么办呢？</strong><br>在此就要引入一个概念：特权方法（privileged method）有权访问私有变量和私有函数的公有方法。</p>
<blockquote>
<p>这个概念是不是和闭包炒鸡像！？</p>
</blockquote>
<p>其实有两种在对象上创建特权方法的方式，第一种就是利用闭包在构造函数中定义特权方法。基本模式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 私有变量和函数</span></div><div class="line">  <span class="keyword">var</span> privateVar = <span class="number">10</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 特权方法</span></div><div class="line">  <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    privateVar++;</div><div class="line">    <span class="keyword">return</span> privateFunc();</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，这样定义特权方法有一个问题：必须使用构造函数模式。而之前已经讨论过了构造函数会为每个实例都创建一组新方法，浪费内存，而接下来介绍的第二种方法，使用静态私有变量就可以避免这个问题。</p>
<h3 id="7-4-1-静态私有变量"><a href="#7-4-1-静态私有变量" class="headerlink" title="7.4.1. 静态私有变量"></a>7.4.1. 静态私有变量</h3><p>基本思想就是：在私有作用域（立即执行函数）中定义私有变量或函数，并在内部通过函数表达式定义构造函数和它的公有方法。基本模式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 私有变量和私有函数</span></div><div class="line">  <span class="keyword">var</span> privateVar = <span class="number">10</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 构造函数</span></div><div class="line">  MyObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 没有使用 var，所以是在 window 上创建（所以是非严格模式下）。</span></div><div class="line"></div><div class="line">  <span class="comment">// 公有/特权方法</span></div><div class="line">  MyObject.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    privateVar++;</div><div class="line">    <span class="keyword">return</span> privateFunc();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>显然，通过上一篇对于对象继承的讨论我们知道：定义在原型对象上的属性和方法是所有实例共享的，而这些方法（如 publicMethod）所操作的对象，即私有变量和函数也是同一个。所以通过 MyObject 构造函数创造的实例都有权访问私有变量（而且是同一个），这就是静态私有变量。</p>
<h3 id="7-4-2-模块模式"><a href="#7-4-2-模块模式" class="headerlink" title="7.4.2. 模块模式"></a>7.4.2. 模块模式</h3><p>模块模式（module pattern）是为「单例」创建私有变量和特权方法。</p>
<blockquote>
<p>那么问题来了，单例是啥？</p>
</blockquote>
<p>单例（singleton）指的就是只有一个实例的对象。比如 JavaScript 中就是以对象字面量来创建单例对象的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleton = &#123;</div><div class="line">  <span class="attr">name</span> : value,</div><div class="line">  <span class="attr">method</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 方法的代码</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>模块模式通过为单例添加私有变量和特权方法使其得到增强：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 私有变量和私有函数</span></div><div class="line">  <span class="keyword">var</span> privateVar = <span class="number">10</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 公有/特权方法</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line"></div><div class="line">    <span class="attr">publicProperty</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      privateVar++;</div><div class="line">      <span class="keyword">return</span> privateFunc();</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>如上面代码所示，模块模式就是使用了一个返回对象的匿名函数：</p>
<ul>
<li>在函数内部定义了私有变量和函数</li>
<li>然后将对象字面量返回。</li>
<li>因为对象是函数内部定义的，所以它的方法是一个闭包。</li>
</ul>
<p>模块模式的应用场景主要是在需要对单例进行某些初始化，同时又需要维护其私有变量时是非常有用的。</p>
<h3 id="7-4-3-增强的模块模式"><a href="#7-4-3-增强的模块模式" class="headerlink" title="7.4.3. 增强的模块模式"></a>7.4.3. 增强的模块模式</h3><p>应用场景：单例必须是某种类型的实例，同时还必须添加某些属性和（或）方法对其进行加强的情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 私有变量和私有函数</span></div><div class="line">  <span class="keyword">var</span> privateVar = <span class="number">10</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 创建对象</span></div><div class="line">  <span class="keyword">var</span> object = <span class="keyword">new</span> CustomType();</div><div class="line"></div><div class="line">  <span class="comment">// 添加公有/特权属性和方法</span></div><div class="line">  object.publicProperty = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  object.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    privateVar++;</div><div class="line">    <span class="keyword">return</span> privateFunc();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> object;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="7-5-小结"><a href="#7-5-小结" class="headerlink" title="7.5. 小结"></a>7.5. 小结</h2><p><strong>1. 在 JavaScript 中，使用函数表达式可以无须对函数命名，从而实现动态编程，还有强大的匿名函数，以下是函数表达式的特点：</strong></p>
<ul>
<li>函数声明必须要有名字，还会声明提升，而函数表达式不需要，没有名字的函数表达式又叫匿名函数</li>
<li>在递归函数中使用函数名调用自身可能会出现问题，如函数名发生了变化。</li>
<li>在递归函数中要掌握调用函数自身的技巧，如 arguments.callee 等。</li>
</ul>
<p><strong>2. 闭包：在外部函数中又定义了一个内部函数，这个内部函数有权访问外部函数的所有变量，原理如下：</strong></p>
<ul>
<li>在 JavaScript 引擎执行时，闭包的 SC 包含了自己的 AO、外部函数的 AO 还有全局 VO。</li>
<li>通常，函数的作用域和所有变量会在函数执行后被销毁。</li>
<li>但是，当函数返回了一个闭包时，外部函数的 AO 会一直保存在内存中，直到解除闭包的引用，如设为 null。</li>
</ul>
<p><strong>3. 使用闭包可以模仿块级作用域：</strong></p>
<ul>
<li>立即执行函数既可以执行其中的代码，又不会在内存中留下对该函数的引用。</li>
<li>所以函数内部的所有变量都会被立即销毁，除非将某些变量赋值给外部作用域中的变量。</li>
</ul>
<p><strong>4. 闭包还可以用于在对象中创建私有变量：</strong></p>
<ul>
<li>函数内部的变量、方法，外部无法访问。</li>
<li>但通过闭包可以实现公有方法，即访问在包含作用域中定义的变量。</li>
<li>有权访问私有变量的公有方法叫做特权方法。</li>
<li>可以使用构造函数模式、原型模式来实现自定义类型的特权方法。</li>
<li>也可以使用模块模式、增强模块模式来实现单例的特权方法。</li>
</ul>
<p><strong>综上：JavaScript 中函数表达式和闭包都是很给力的特性。不过，因为创建闭包必须维护额外的作用域，所以过度使用可能会占用大量内存。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;零、前言&lt;/strong&gt;&lt;br&gt;《JavaScript 高级程序设计（第三版）》第7章 函数表达式，学习笔记整理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要内容有如下三部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;函数表达式的特征&lt;/li&gt;
&lt;li&gt;使用函数实现递归&lt;/li&gt;
&lt;li&gt;使用闭包定义私有变量&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="全栈" scheme="https://buptsteve.github.io/blog/categories/%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JavaScript" scheme="https://buptsteve.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>「5」JavaScript 面向对象深入理解</title>
    <link href="https://buptsteve.github.io/blog/2016/03/17/5.js-oo-chapter6/"/>
    <id>https://buptsteve.github.io/blog/2016/03/17/5.js-oo-chapter6/</id>
    <published>2016-03-17T08:27:58.000Z</published>
    <updated>2016-10-16T16:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>零、前言</strong><br>最近为了找暑假实习，正在恶补基础，仔细研读了《JavaScript 高级程序设计（第三版）》第6章 面向对象的程序设计。感觉收获颇多，在此献丑分享一点儿自己的理解。</p>
<blockquote>
<p>同样按照书本的顺序分为如下三部分</p>
</blockquote>
<ul>
<li>理解对象属性</li>
<li>理解并创建对象</li>
<li>理解继承</li>
</ul>
<a id="more"></a>
<h1 id="一、第6章-面向对象的程序设计"><a href="#一、第6章-面向对象的程序设计" class="headerlink" title="一、第6章 面向对象的程序设计"></a>一、第6章 面向对象的程序设计</h1><h2 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1. 理解对象"></a>6.1. 理解对象</h2><p>ECMA-262 把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。”简单来说，对象就是一些名值对（Key-Value），而对象的名字就是一个指针。</p>
<h3 id="6-1-1-属性类型"><a href="#6-1-1-属性类型" class="headerlink" title="6.1.1. 属性类型"></a>6.1.1. 属性类型</h3><p>ECMAScript 中有两种属性：数据属性和访问器属性。</p>
<h3 id="6-1-2-数据属性"><a href="#6-1-2-数据属性" class="headerlink" title="6.1.2. 数据属性"></a>6.1.2. 数据属性</h3><ul>
<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认为 true。</li>
<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性，以及 console.log 时是否显示，默认为 true。</li>
<li>[[Writable]]：表示能否修改属性的值，默认为 true。</li>
<li>[[Value]]：包含这个属性的数据值，默认为 undefined。</li>
</ul>
<p>要修改以上属性，必须使用 ES5 中的 Object.defineProperty()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例1</span></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">value</span>   : <span class="string">"steve"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">alert(person.name); <span class="comment">// steve</span></div><div class="line">person.name = <span class="string">"abc"</span>;</div><div class="line">alert(person.name); <span class="comment">// steve</span></div><div class="line"></div><div class="line"><span class="comment">// 例2</span></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">value</span>       : <span class="string">"steve"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 抛出错误</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">value</span>       : <span class="string">"steve"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ps 在调用 Object.defineProperty() 方法时，默认值为 false(就是说其他没写的属性都是 false)。</p>
<h3 id="6-1-3-访问器属性"><a href="#6-1-3-访问器属性" class="headerlink" title="6.1.3. 访问器属性"></a>6.1.3. 访问器属性</h3><p>访问器属性不包括数据值(Value)，取而代之的是一对儿 getter 和 setter 函数(非必须)。</p>
<ul>
<li>[[Configurable]]：表能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性，默认为 true。</li>
<li>[[Enumerable]]：表能否通过 for-in 循环返回属性，以及 console.log 时是否显示，默认为 true。</li>
<li>[[Get]]：在读取属性时调用的函数，默认为 true。</li>
<li>[[Set]]：在写入属性时调用的函数，默认为 undefined。</li>
</ul>
<p>访问器属性不能直接定义，必须使用 Object.defineProperty() 来定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">  <span class="attr">_year</span>  : <span class="number">2004</span>,</div><div class="line">  <span class="attr">edition</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">      <span class="keyword">this</span>._year = newValue;</div><div class="line">      <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line">alert(book.edition); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>ps 如果只定义了两个方法的其中之一，那么另一种方式则无法使用，例如只定义了 getter，则属性不可写。</p>
<h3 id="6-1-4-定义多个属性"><a href="#6-1-4-定义多个属性" class="headerlink" title="6.1.4. 定义多个属性"></a>6.1.4. 定义多个属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">  <span class="attr">_year</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">2004</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">year</span>: &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">        <span class="keyword">this</span>._year = newValue;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line">alert(book.edition); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="6-1-5-读取属性的特性"><a href="#6-1-5-读取属性的特性" class="headerlink" title="6.1.5. 读取属性的特性"></a>6.1.5. 读取属性的特性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line"></div><div class="line">alert(desc.value);        <span class="comment">// 2004</span></div><div class="line">alert(desc.configurable); <span class="comment">// false</span></div><div class="line">alert(<span class="keyword">typeof</span> desc.get);   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2. 创建对象"></a>6.2. 创建对象</h2><p>使用 Object 构造函数和字面量创建对象，会产生大量重复代码，所以以下代码重用机制应运而生。</p>
<h3 id="6-2-1-工厂模式"><a href="#6-2-1-工厂模式" class="headerlink" title="6.2.1. 工厂模式"></a>6.2.1. 工厂模式</h3><p>特点：使用函数封装特定接口创建对象的细节。</p>
<p>简单来说就是在函数的内部创建对象，为其添加属性和方法后，用 return 返回，在实例化时不使用 new 操作符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">name</span>: name,</div><div class="line">    <span class="attr">age</span> : age,</div><div class="line">    <span class="attr">job</span> : job,</div><div class="line"></div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"fe"</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"young"</span>, <span class="number">25</span>, <span class="string">"fs"</span>);</div></pre></td></tr></table></figure>
<p>问题：没有解决对象识别的问题（即怎样知道一个对象的类型），重复构造相同的方法造成内存浪费，也无法进行继承复用。</p>
<h3 id="6-2-2-构造函数模式"><a href="#6-2-2-构造函数模式" class="headerlink" title="6.2.2. 构造函数模式"></a>6.2.2. 构造函数模式</h3><p>特点：在构造函数中使用 this 对象在运行时基于函数的执行环境动态绑定，使用 new 操作符实例化。</p>
<p>ps 通过 new 关键字方式调用的函数都被认为是构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age  = age;</div><div class="line">  <span class="keyword">this</span>.job  = job;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"fe"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"young"</span>, <span class="number">25</span>, <span class="string">"fs"</span>);</div><div class="line"></div><div class="line">alert(person1.constructor === Person); <span class="comment">// true</span></div><div class="line">alert(person2.constructor === Person); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h4 id="1-与工厂模式的不同之处"><a href="#1-与工厂模式的不同之处" class="headerlink" title="1. 与工厂模式的不同之处"></a>1. 与工厂模式的不同之处</h4><ul>
<li>没有显式地创建对象</li>
<li>直接将属性和方法赋值给了 this 对象</li>
<li>没有 return 语句</li>
</ul>
<h4 id="2-必须使用-new-操作符创建新实例"><a href="#2-必须使用-new-操作符创建新实例" class="headerlink" title="2. 必须使用 new 操作符创建新实例"></a>2. 必须使用 new 操作符创建新实例</h4><p>这个过程经历以下4个步骤：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（this 指向新对象）</li>
<li>执行构造函数中的代码（为之添加属性）</li>
<li>返回新对象</li>
</ol>
<p>这种方式胜过工厂模式的地方就在于：可以将实例标识为一种特定的类型。</p>
<h4 id="3-构造函数当作普通函数"><a href="#3-构造函数当作普通函数" class="headerlink" title="3. 构造函数当作普通函数"></a>3. 构造函数当作普通函数</h4><p>既然实例化需要使用 new 操作符，万一不使用又会怎么样的？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当作构造函数使用</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"fe"</span>);</div><div class="line">person.sayName();          <span class="comment">// steve</span></div><div class="line"></div><div class="line"><span class="comment">// 当作普通函数使用</span></div><div class="line">Person(<span class="string">"young"</span>, <span class="number">24</span>, <span class="string">"fe"</span>); <span class="comment">// 添加到 window 对象中</span></div><div class="line"><span class="built_in">window</span>.sayName();          <span class="comment">// young</span></div><div class="line"></div><div class="line"><span class="comment">// 在另一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"sasuke"</span>, <span class="number">24</span>, <span class="string">"fe"</span>);</div><div class="line">o.sayName();               <span class="comment">// sasuke</span></div></pre></td></tr></table></figure>
<h4 id="4-构造函数的问题"><a href="#4-构造函数的问题" class="headerlink" title="4. 构造函数的问题"></a>4. 构造函数的问题</h4><p>每个方法有独立的内存，造成浪费。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">alert(person1.sayName == person2.sayName); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 虽然可以把函数定义转移到构造函数外</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age  = age;</div><div class="line">  <span class="keyword">this</span>.job  = job;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.sayName = sayName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.Name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然这样将其设置成了全局函数，但是新问题就是：全局函数却只能被某个对象调用，并且如果需要定义很多方法，就需要定义很多全局函数，也就是说毫无封装性可言。</p>
<h3 id="6-2-3-原型模式"><a href="#6-2-3-原型模式" class="headerlink" title="6.2.3. 原型模式"></a>6.2.3. 原型模式</h3><p>首先我们要知道每一个函数都有一个属性叫做 prototype，这个属性是一个指针，指向函数的原型对象。</p>
<blockquote>
<p>原型对象的用途：包含可以由特定类型的「所有实例」[共享]的属性和方法。</p>
</blockquote>
<p>换句话来说就是：所有对象实例可以一起通过这个 prototype 来共享属性和方法～。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 属性</span></div><div class="line">Person.prototype.name = <span class="string">"steve"</span>;</div><div class="line">Person.prototype.age  = <span class="number">24</span>;</div><div class="line">Person.prototype.job  = <span class="string">"Web Developer"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 方法</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName(); <span class="comment">// steve</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName(); <span class="comment">// steve</span></div><div class="line"></div><div class="line">alert(person1.sayName === person2.sayName); <span class="comment">// true 共享同一个方法</span></div></pre></td></tr></table></figure>
<h4 id="1-深入理解原型对象"><a href="#1-深入理解原型对象" class="headerlink" title="1. 深入理解原型对象"></a>1. 深入理解原型对象</h4><ul>
<li>只要是函数，都有一个 prototype 指针，指向原型对象。</li>
<li>而原型对象默认会自动获得一个 constructor 指针，指向上一条中的函数。（你指我？我也指你→_→）</li>
<li>调用构造函数创建一个新实例后，实例内部也会获得一个 [[prototype]] 指针（ES5 中这么叫），指向原型对象（不是创造它的构造函数！）。</li>
</ul>
<p>下面进行详细说明：</p>
<ul>
<li>第一条很好理解，当作大自然的规律来记就好啦，你否认也没用…</li>
<li>第二条就是说原型对象与一般的对象最大的不同就是这个 constructor 指针，所以在重写构造函数的 prototype 时，要想与之前的原型对象保持一致，最好也加上这个 constructor 指针（显得专业嘛～）。</li>
<li>第三条，其实在 Firefox、Safari 和 Chrome 中，[[prototype]] 就是 <code>__proto__</code> 指针。</li>
<li>ps 无论有没有 <code>__proto__</code> 指针，我们都可以通过 isPrototypeOf() 方法来确定对象之间是否存在原型关系。（<code>Person.prototype.isPrototypeOf(person1) // true</code>）</li>
<li>pps ES5 中增加了一个新方法 Object.getPrototypeOf() （<code>Object.getPrototypeOf(person1) === Person.prototype // true</code>）</li>
</ul>
<p>总结一下就是：构造函数有指向原型对象的指针(prototype)，原型对象也有指向构造函数的指针(constructor)，实例同样也有指向原型对象的指针([[prototype]])</p>
<hr>
<p><strong>那么这玩意儿搞这么复杂有啥用咧…?</strong></p>
<p>简单举个栗子，上文中 6.2.3.原型模式一节中的两个实例(person1,person2)并不包含任何属性和方法，但是我们仍然可以调用 person1.sayName() 方法，这就是通过查找对象属性的过程实现的。</p>
<p>还有我们经常使用的各种数组方法(slice,splice,sort…)，同样也是定义在 Array.prototype 这个对象上的。</p>
<p>其实每当读取某个对象的某个属性时，都会执行一次搜索，目标就是给定的属性名。首先当然先搜索对象实例自身，如果没找到再继续搜索 [[prototype]] 指针指向的原型对象，如果找不到再向上查找…</p>
<p>所以实例的属性可以“屏蔽“原型链上的同名属性。（通过 delete 可以删除实力属性，消除屏蔽）</p>
<h6 id="a-如何判断属性属于实例还是原型链？"><a href="#a-如何判断属性属于实例还是原型链？" class="headerlink" title="a. 如何判断属性属于实例还是原型链？"></a>a. 如何判断属性属于实例还是原型链？</h6><p>很简单，使用 hasOwnProperty() 犯法。</p>
<h6 id="b-如果原型链上也没有咋办？"><a href="#b-如果原型链上也没有咋办？" class="headerlink" title="b. 如果原型链上也没有咋办？"></a>b. 如果原型链上也没有咋办？</h6><p>还记得 JavaScript 中的数据类型么，不平凡的那个引用类型 Object。我们使用的 Array、Function、Date、RegExp… 都是由 Object 派生而成。换句话说他们的原型对象都指向了 Object.prototype。最后 Object.prototype 又指向了 null。</p>
<p>所以如果寻找属性直到 Object.prototype 中都没有，从而找到 null。那么 JS 引擎就会抛出 undefined。</p>
<h4 id="2-原型与-in-操作符"><a href="#2-原型与-in-操作符" class="headerlink" title="2. 原型与 in 操作符"></a>2. 原型与 in 操作符</h4><p>in 操作符用来判断对象能否访问给定属性（前提是 enumerable 为 true），有两种方法使用 in 操作符：</p>
<ul>
<li>单独使用</li>
<li>在 for-in 循环中使用</li>
</ul>
<p>但由于 in 操作符不区分实例和原型链，所以日常使用中需要结合 hasOwnProperty() 方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>) </span>&#123;</div><div class="line">  <span class="comment">// 判断是否是原型链上的属性</span></div><div class="line">  <span class="keyword">return</span> !object.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外要取得对象上所有可枚举的实例属性，可以用 ES5 中的 Object.keys() 方法（返回数组）。</p>
<p>当然如果要取得所有实例属性，无论是否可枚举，可以用 Object.getOwnPropertyNames() 方法。</p>
<h4 id="3-更简单的原型方法"><a href="#3-更简单的原型方法" class="headerlink" title="3. 更简单的原型方法"></a>3. 更简单的原型方法</h4><p>日常使用中，每当要为原型对象添加一个属性或方法，都要敲一遍 Person.prototype，这样太不优雅了…</p>
<p>所以一般采用对象字面量将属性和方法都包起来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person, <span class="comment">// 别忘了之前说过的 constructor 指针。</span></div><div class="line"></div><div class="line">  name: <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">age</span> : <span class="number">24</span>,</div><div class="line">  <span class="attr">job</span> : <span class="string">"Web Developer"</span>,</div><div class="line"></div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>但是，如果你是个完美主义者，还有一点要注意：原生 constructor 属性是不可枚举的，所以可以用 Object.defineProperty() 将其改写回来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">age</span> : <span class="number">24</span>,</div><div class="line">  <span class="attr">job</span> : <span class="string">"Web Developer"</span>,</div><div class="line"></div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</div><div class="line">  <span class="attr">enumerable</span>  : <span class="literal">false</span>, <span class="comment">// 默认值，其实可以不写</span></div><div class="line">  writable    : <span class="literal">true</span>,</div><div class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">value</span>       : Person</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-原型的动态性"><a href="#4-原型的动态性" class="headerlink" title="4. 原型的动态性"></a>4. 原型的动态性</h4><p>略，只要你了概（解）了指针是咩（什么）就大丈夫（没问题）。</p>
<h4 id="5-原型对象的原型"><a href="#5-原型对象的原型" class="headerlink" title="5. 原型对象的原型"></a>5. 原型对象的原型</h4><p>略，大概内容就是说了下俺们原生的对象和乃们“野生”对象一样也是有原型的╮(╯▽╰)╭。</p>
<h4 id="6-原型对象的问题"><a href="#6-原型对象的问题" class="headerlink" title="6. 原型对象的问题"></a>6. 原型对象的问题</h4><p>问题其实是来自于自身共享的本性。</p>
<p>例如，包含引用类型的属性。由于引用类型实际上就是指针，所以所有实例操作的都是同一个引用对象，见下例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line"></div><div class="line">  <span class="attr">name</span>   : <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">age</span>    : <span class="number">24</span>,</div><div class="line">  <span class="attr">job</span>    : <span class="string">"Web Developer"</span>,</div><div class="line">  <span class="attr">friends</span>: [<span class="string">"shirley"</span>, <span class="string">"jame"</span>],</div><div class="line"></div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"van"</span>);</div><div class="line"></div><div class="line">alert(person1.friends); <span class="comment">// ["shirley", "jame","van"]</span></div><div class="line">alert(person2.friends); <span class="comment">// ["shirley", "jame","van"]</span></div><div class="line">alert(person1.friends === person2.friends); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="6-2-4-组合使用构造函数模式和原型模式"><a href="#6-2-4-组合使用构造函数模式和原型模式" class="headerlink" title="6.2.4. 组合使用构造函数模式和原型模式"></a>6.2.4. 组合使用构造函数模式和原型模式</h3><p>经过上文的讨论我们知道：</p>
<ul>
<li>构造函数模式可以为每个实例生成单独的属性，但无法共享。</li>
<li>原型模式可以共享，但无法为实例生成单独的属性。</li>
</ul>
<p>既然构造函数模式和原型模式的优缺点正好互补，那么为何不将两者结合，发挥各自的长处？</p>
<p>组合模式就是基于这一朴素的思想：</p>
<ul>
<li>构造函数用于定义实例属性</li>
<li>原型模式用于定义共享的属性和方法</li>
</ul>
<p>这样一来，每个实例都有自己的实例属性副本，但同时又共享着原型对象中的方法和属性，最大限度地节省了内存，还支持向构造函数中传递参数，可谓博采众长也～=￣ω￣=～。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name    = name;</div><div class="line">  <span class="keyword">this</span>.age     = age;</div><div class="line">  <span class="keyword">this</span>.job     = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"shirley"</span>, <span class="string">"jame"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line"></div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"Web Developer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"nicholas"</span>, <span class="number">29</span>, <span class="string">"Soft Engineer"</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"van"</span>);</div><div class="line"></div><div class="line">alert(person1.friends); <span class="comment">// ["shirley", "jame","van"]</span></div><div class="line">alert(person2.friends); <span class="comment">// ["shirley", "jame"]</span></div><div class="line">alert(person1.friends === person2.friends); <span class="comment">// false</span></div><div class="line">alert(person1.sayName === person2.sayName); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="6-2-5-动态原型模式"><a href="#6-2-5-动态原型模式" class="headerlink" title="6.2.5. 动态原型模式"></a>6.2.5. 动态原型模式</h3><p>本质其实还是组合模式，只不过把原型对象中共享的属性和方法，也封装在构造函数里…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name    = name;</div><div class="line">  <span class="keyword">this</span>.age     = age;</div><div class="line">  <span class="keyword">this</span>.job     = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"shirley"</span>, <span class="string">"jame"</span>];</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</div><div class="line">    <span class="comment">// 不能使用对象字面量 Person.prototype = &#123;...&#125;;</span></div><div class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"Web Developer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"nicholas"</span>, <span class="number">29</span>, <span class="string">"Soft Engineer"</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"van"</span>);</div><div class="line"></div><div class="line">alert(person1.friends); <span class="comment">// ["shirley", "jame","van"]</span></div><div class="line">alert(person2.friends); <span class="comment">// ["shirley", "jame"]</span></div><div class="line">alert(person1.friends === person2.friends); <span class="comment">// false</span></div><div class="line">alert(person1.sayName === person2.sayName); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="6-2-6-寄生构造函数模式"><a href="#6-2-6-寄生构造函数模式" class="headerlink" title="6.2.6. 寄生构造函数模式"></a>6.2.6. 寄生构造函数模式</h3><p>首先一般来说，组合模式已经足够应付日常需求，所以这个模式是为了应对特殊需求：例如我们需要创建一个具有额外方法的特殊数组，但是不能直接修改 Array 的构造函数（见下例）。</p>
<p>具体形式上除了使用 new 操作符创建实例以外，和工厂模式一毛（模）一样（同样的问题）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 内部创建一个新数组</span></div><div class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line">  <span class="comment">// 添加值</span></div><div class="line">  values.push.apply(values, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 添加方法</span></div><div class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> values;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>); <span class="comment">// 注意：使用 new 创建实例</span></div><div class="line">alert(colors.toPipedString()); <span class="comment">// red|blue|green</span></div></pre></td></tr></table></figure>
<h4 id="这个模式其实利用了构造函数的特性："><a href="#这个模式其实利用了构造函数的特性：" class="headerlink" title="这个模式其实利用了构造函数的特性："></a>这个模式其实利用了构造函数的特性：</h4><ul>
<li>如果被调用的函数没有显式的 return 表达式，则隐式地会返回 this 对象 - 也就是新创建的隐式对象。</li>
<li>显式的 return 表达式将会影响返回结果，但仅限于返回的是一个对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo().constructor === <span class="built_in">Number</span> <span class="comment">// false，返回新创建的隐式对象</span></div><div class="line"><span class="keyword">new</span> Bar().constructor === <span class="built_in">Number</span> <span class="comment">// true，返回 Number 对象</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.value = <span class="number">2</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Test()); <span class="comment">// &#123;foo: 1&#125;，返回的对象，this 对象被销毁了，value 丢失了</span></div></pre></td></tr></table></figure>
<h3 id="6-2-7-稳妥构造函数模式"><a href="#6-2-7-稳妥构造函数模式" class="headerlink" title="6.2.7. 稳妥构造函数模式"></a>6.2.7. 稳妥构造函数模式</h3><p>首先要介绍 Douglas Crockford 发明的「稳妥对象」(durable objects) 这个概念：没有公共属性，而且方法也不引用 this 的对象。</p>
<p>主要用在需要安全的环境（禁止 this 和 new），或者在防止数据被其他程序（如 Mashup）改动时使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="comment">//创建要返回的对象</span></div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">  <span class="comment">//可以在这里定义私有变量和函数</span></div><div class="line"></div><div class="line">  <span class="comment">//添加方法</span></div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(name); <span class="comment">// 注意：这里没有使用 this，因此我的理解是相当于闭包，保存住了外部 Person 的 AO（活动对象）</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//返回对象</span></div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = Person(<span class="string">"steve"</span>, <span class="number">24</span>, <span class="string">"web developer"</span>);</div><div class="line">person.sayName(); <span class="comment">//"steve"</span></div></pre></td></tr></table></figure>
<p>这里变量 person 中保存的就是一个稳妥对象，因为除了调用 sayName() 方法以外，没有别的方法可以访问内部的数据。</p>
<p>即使有其他代码会给这个对象添加方法或数据，也无法访问传入到构造函数中的原始数据。</p>
<h2 id="6-3-继承"><a href="#6-3-继承" class="headerlink" title="6.3. 继承"></a>6.3. 继承</h2><p>许多面向对象的编程语言都支持两种继承方式：</p>
<ul>
<li>接口继承：只继承方法签名</li>
<li>实现继承：继承实际的方法</li>
</ul>
<p>在 ECMAScript 中由于函数没有签名，所以无法实现接口继承，只支持实现继承，而这正是依靠「原型链」来实现的。</p>
<h3 id="6-3-1-原型链"><a href="#6-3-1-原型链" class="headerlink" title="6.3.1. 原型链"></a>6.3.1. 原型链</h3><p>既然这继承的关键在于「原型链」，我们就先来了概（解）下原型链的概念究竟是神马…</p>
<blockquote>
<p>基本思想：利用 prototype（原型对象），让一个引用类型继承另一个引用类型的属性和方法。</p>
</blockquote>
<p>简单回顾一下之前讨论过的关于，构造函数、原型对象和实例的关系：</p>
<ul>
<li>每个构造函数都有一个指向自己原型对象的 prototype 指针。</li>
<li>原型对象又都包含一个指向构造函数的 constructor 指针。</li>
<li>实例都包含一个指向原型对象的 [[prototype]] 内部指针（<code>__proto__</code>）。</li>
</ul>
<p><strong>假如我们让「原型对象」等于另一个类型的「实例」，结果会是怎样的呢？</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> foo(); <span class="comment">// a 是父类 foo 的实例</span></div><div class="line">bar.prototype = a; <span class="comment">// 「原型对象 bar.prototype」等于另一个类型的「实例 a」</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> bar(); <span class="comment">// b 是子类 bar 的实例</span></div></pre></td></tr></table></figure>
<p>简单分析一下以上代码：</p>
<ul>
<li>「1」a 作为 foo 的实例，a 的内部指针 [[prototype]] 指向原型对象 foo.prototype。</li>
<li>「2」bar.prototype 被赋值为 a，所以相当于 bar.prototype 有内部指针 [[prototype]] 指向原型对象 foo.prototype。</li>
<li>「3」b 作为 bar 的实例，b 的内部指针 [[prototype]] 指向原型对象 bar.prototype。</li>
<li>「4」综上，这样便形成了一条：<code>b -&gt; bar.prototype -&gt; foo.prototype</code> 的原型链。</li>
<li>「5」假如另一个原型又是另一个类型的实例，那么上述关系仍然成立，如此层层递进，可以生成更长的原型链。</li>
</ul>
<p>以上就是原型链的基本概念…</p>
<p><strong>下面再来看看一种实现原型链的基本模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType(); <span class="comment">// 注意：使用 new 生成父类实例，重写了原型对象</span></div><div class="line"></div><div class="line"><span class="comment">// 必须后添加方法（不然方法就加到之前的对象上去了_(:зゝ∠)_，要理解指针）</span></div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue()); <span class="comment">// true，成功继承父类原型对象上的方法</span></div><div class="line">alert(instance.constructor);     <span class="comment">// SuperType，因为访问的是 Super.prototype 中的 constructor</span></div></pre></td></tr></table></figure>
<h4 id="1-别忘记默认的原型"><a href="#1-别忘记默认的原型" class="headerlink" title="1. 别忘记默认的原型"></a>1. 别忘记默认的原型</h4><p>其实，所有的引用类型都默认继承自 Object，而这个继承也是通过原型链实现的。所以所有自定义类型都能够使用 toString()、valueOf() 等方法。</p>
<h4 id="2-确定原型和实例的关系"><a href="#2-确定原型和实例的关系" class="headerlink" title="2. 确定原型和实例的关系"></a>2. 确定原型和实例的关系</h4><p>有两种方法确定原型和实例的关系：</p>
<ul>
<li>instanceof 操作符</li>
<li>isPrototypeof() 方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alert(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>);    <span class="comment">// true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SuperType); <span class="comment">// true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SubType);   <span class="comment">// true</span></div><div class="line"></div><div class="line">alert(<span class="built_in">Object</span>.prototype.isPrototypeof(instance));    <span class="comment">// true</span></div><div class="line">alert(SuperType.prototype.isPrototypeof(instance)); <span class="comment">// true</span></div><div class="line">alert(SubType.prototype.isPrototypeof(instance));   <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h4 id="3-谨慎地定义方法"><a href="#3-谨慎地定义方法" class="headerlink" title="3. 谨慎地定义方法"></a>3. 谨慎地定义方法</h4><p>子类型有时候需要覆盖超类型的某个方法，或者需要添加超类型中不存在的某个方法。但不管怎样，给原型添加方法的代码一定要放在替换原型的语句之后，这点很好理解。</p>
<p>还要注意以下这种使用对象字面量创建原型方法的情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// blabla...</span></div><div class="line"></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType(); <span class="comment">// 注意：使用 new 生成父类实例，重写了原型对象</span></div><div class="line"></div><div class="line"><span class="comment">// 隐式地创建了一个新对象，改写了 SubType.prototype 的指针指向</span></div><div class="line">SubType.prototype = &#123;</div><div class="line">  <span class="attr">getSubValue</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">someOtherMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="4-原型链的问题"><a href="#4-原型链的问题" class="headerlink" title="4. 原型链的问题"></a>4. 原型链的问题</h4><ul>
<li>引用类型属性的问题：相当于将父类属性添加到子类原型对象上形成共享。</li>
<li>创建子类实例时，不能向超类型的构造函数中传递参数：准确的说是无法在不影响所有对象实例的情况下，给父类的构造函数传递参数。</li>
</ul>
<h3 id="6-3-2-借用构造函数"><a href="#6-3-2-借用构造函数" class="headerlink" title="6.3.2. 借用构造函数"></a>6.3.2. 借用构造函数</h3><p>在解决原型链以上问题的过程中，产生了一种叫做「借用构造函数（伪造对象、经典继承）」的技术。</p>
<p>基本思想是：在子类构造函数内部调用父类构造函数，主要通过 call() 和 apply() 方法实现。</p>
<h4 id="1-传递参数"><a href="#1-传递参数" class="headerlink" title="1. 传递参数"></a>1. 传递参数</h4><p>相对于原型链而言，借用构造函数最大的优势就是解决了传递参数的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>, <span class="string">'steve'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.age = <span class="number">24</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.name); <span class="comment">// steve</span></div><div class="line">alert(instance.age);  <span class="comment">// 24</span></div></pre></td></tr></table></figure>
<h4 id="2-借用构造函数的问题"><a href="#2-借用构造函数的问题" class="headerlink" title="2. 借用构造函数的问题"></a>2. 借用构造函数的问题</h4><p>源自于构造函数的问题：方法都在构造函数中定义，无法函数复用，子类方法也无法使用父类原型对象中的方法。</p>
<h3 id="6-3-3-组合继承"><a href="#6-3-3-组合继承" class="headerlink" title="6.3.3. 组合继承"></a>6.3.3. 组合继承</h3><p>顾名思义，就是将原型链和借用构造函数结合。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 借用构造函数继承属性</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>, name);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用原型链继承了方法</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div></pre></td></tr></table></figure>
<p>虽然看起来结合了两者的优点，既能够传递参数，又能实现原型链继承，但是应该注意到 <code>SubType.prototype = new SuperType();</code> 一句。</p>
<p>我们的预期只是子类 SubType 拥有父类的属性，即 <code>SuperType.call(this, name);</code> 的工作。</p>
<p>但是 SubType.prototype 上也拥有了一个值为 undefined 的 name 属性和 colors 数组。这不是我们的本意，这就是直接使用 new 操作符将父类实例赋值给子类原型对象的副作用╮(╯▽╰)╭。</p>
<p><strong>要解决组合模式存在的问题，首先来看几个其他方式的继承。</strong></p>
<h3 id="6-3-4-原型式继承"><a href="#6-3-4-原型式继承" class="headerlink" title="6.3.4. 原型式继承"></a>6.3.4. 原型式继承</h3><p>由 Douglas Crockford（又是你→_→）在2006年的一篇文章中介绍，基本思想是：基于已有对象，借助原型创建新对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">  F.prototype = o;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即先创建一个临时性的构造函数 F，然后将传入的对象 o 作为这个构造函数的原型 <code>F.prototype</code>，最后返回这个临时类型的一个新实例 <code>new F()</code>。从本质上将就是对于传入的对象 o 进行了一次浅复制。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">friends</span>: [<span class="string">"shirley"</span>, <span class="string">"jame"</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = object(person);</div><div class="line">anotherPerson.name = <span class="string">"young"</span>;</div><div class="line">anotherPerson.friends.push(<span class="string">"sasuke"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yetAnotherPerson = object(person);</div><div class="line">yetAnotherPerson.name = <span class="string">"nicholas"</span>;</div><div class="line">yetAnotherPerson.friends.push(<span class="string">"jobs"</span>);</div><div class="line"></div><div class="line">alert(person.friends); <span class="comment">// shirley,jame,sasuke,jobs，friends 被共享了</span></div></pre></td></tr></table></figure>
<p>ES5 中新增了 Object.create() 方法规范化了原型式继承。可以接收两个参数，第一个参数就是要继承的对象，第二个对象是可选的一个为新对象定义额外属性的对象。其实只传一个参数时，两个方法行为相同。</p>
<p>第二个参数与 Object.defineProperties() 方法的第二个参数格式相同（覆盖同名属性），见下例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">friends</span>: [<span class="string">"shirley"</span>, <span class="string">"jame"</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person, &#123;</div><div class="line">  <span class="attr">name</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="string">"greg"</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">alert(anotherPerson.name); <span class="comment">// greg</span></div></pre></td></tr></table></figure>
<h3 id="6-3-5-寄生式继承"><a href="#6-3-5-寄生式继承" class="headerlink" title="6.3.5. 寄生式继承"></a>6.3.5. 寄生式继承</h3><p>基本思路类似用工厂模式包装原型式继承：创建一个仅用于封装继承过程的函数，在内部以某种方式来增强对象，最后返回该对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"steve"</span>,</div><div class="line">  <span class="attr">friends</span>: [<span class="string">"shirley"</span>, <span class="string">"jame"</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> clone = object(original); <span class="comment">// 原型式继承对象 original</span></div><div class="line"></div><div class="line">  <span class="comment">// 增强对象</span></div><div class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"Hi"</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> clone; <span class="comment">// 返回对象</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = createAnother(person);</div><div class="line">anotherPerson.sayHi(); <span class="comment">// Hi</span></div></pre></td></tr></table></figure>
<h3 id="6-3-6-寄生组合式继承"><a href="#6-3-6-寄生组合式继承" class="headerlink" title="6.3.6. 寄生组合式继承"></a>6.3.6. 寄生组合式继承</h3><p>首先实力吹一波：作为压轴出场的终极继承方式，几乎是最理想的继承范式。</p>
<p>前面在介绍组合继承的时候说到了主要问题出在 <code>SubType.prototype = new SuperType();</code> 这句。它将父类构造函数中的属性也添加到了子类原型对象中，而这不符合我们的期望。</p>
<blockquote>
<p>其实让我们回到需求本身：我们希望子类的原型对象能够指向父类的原型对象，实现原型链继承。</p>
</blockquote>
<p>那么想一想 6.3.4. 原型式继承，我们让子类原型式继承父类的原型对象不就完美了么？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>, name); <span class="comment">// 借用构造函数，继承父类属性（解决了传参）</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="built_in">Object</span>.create(SuperType.prototype, &#123;</div><div class="line">  <span class="attr">constructor</span>: &#123;</div><div class="line">    <span class="attr">value</span>       : SubType, <span class="comment">// 指回子类构造函数</span></div><div class="line">    enumerable  : <span class="literal">false</span>,   <span class="comment">// 默认值，其实可以不写</span></div><div class="line">    writable    : <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 必须后添加方法（不然方法就加到之前的对象上去了_(:зゝ∠)_，要理解指针）</span></div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="6-4-小结"><a href="#6-4-小结" class="headerlink" title="6.4. 小结"></a>6.4. 小结</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul>
<li>工厂模式：简单地在函数内部创建对象，添加属性和方法，然后返回对象。</li>
<li>构造函数模式：在函数内部使用 this 添加属性和方法，可以创建自定义引用类型，可以使用 new 操作符创建实例。但是无法实现函数复用，造成内存浪费等问题。</li>
<li>原型模式：使用构造函数的 prototype 属性来指定共享的属性和方法，本质上就是为了共享而生。</li>
<li>组合模式：结合构造函数和原型模式的优点。</li>
</ul>
<h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><ul>
<li>原型链：将父类的实例赋值给子类构造函数的原型对象。但这样会有两个问题：传参和子类原型上有多余的父类构造函数中的属性。</li>
<li>借用构造函数：为了解决传参问题，采用在子类中调用父类构造函数的方法。</li>
<li>原型式：可以在不必预先定义构造函数的情况下实现继承，本质是执行对给定对象的浅复制。</li>
<li>寄生组合式：巧妙利用原型式继承解决原型链中的第二个问题，是基于类型继承的最好方式。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;零、前言&lt;/strong&gt;&lt;br&gt;最近为了找暑假实习，正在恶补基础，仔细研读了《JavaScript 高级程序设计（第三版）》第6章 面向对象的程序设计。感觉收获颇多，在此献丑分享一点儿自己的理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样按照书本的顺序分为如下三部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;理解对象属性&lt;/li&gt;
&lt;li&gt;理解并创建对象&lt;/li&gt;
&lt;li&gt;理解继承&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="全栈" scheme="https://buptsteve.github.io/blog/categories/%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JavaScript" scheme="https://buptsteve.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>「4」Byrs-News 建站笔记（一）</title>
    <link href="https://buptsteve.github.io/blog/2016/03/16/4.byrs-news%20notes%201/"/>
    <id>https://buptsteve.github.io/blog/2016/03/16/4.byrs-news notes 1/</id>
    <published>2016-03-16T03:27:58.000Z</published>
    <updated>2016-10-17T06:30:20.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p>差不多结束了在移动研究院快一年的实习，加上马上到来的寒假，想着闲着也是闲着不然做个网站练练手吧╮(╯▽╰)╭</p>
<p>于是在寒假里就捣鼓了这么个网站 <a href="http://182.254.241.100" target="_blank" rel="external">Byrs-News</a> | <a href="https://github.com/BuptStEve/byrs-news" target="_blank" rel="external">开源地址</a>，主要内容是通过爬虫 <a href="https://github.com/BuptStEve/byr-crawler" target="_blank" rel="external">Byr-Crawler</a> 对于北邮人论坛帖子进行定时爬取，在收集整理之后希望大家能够更加“优雅地”浏览论坛～=￣ω￣=～。</p>
<a id="more"></a>
<h2 id="一、技术栈"><a href="#一、技术栈" class="headerlink" title="一、技术栈"></a>一、技术栈</h2><ul>
<li>网站采用了 Meteor.js 全栈式开发</li>
<li>数据库选择了 MongoDB 进行存储</li>
<li>内容获取来自自己编写的 Node.js 爬虫</li>
</ul>
<p>那么首先问题来了…</p>
<h3 id="1-1-Meteor-是个什么玩意儿？"><a href="#1-1-Meteor-是个什么玩意儿？" class="headerlink" title="1.1. Meteor 是个什么玩意儿？"></a>1.1. Meteor 是个什么玩意儿？</h3><p>Meteor 是一个只使用 JavaScript 就可以开发 Web 和移动端应用的全栈框架。主要特点有：</p>
<ul>
<li>一种语言(One Language)：JavaScript（就可以搞定服务器、浏览器、移动设备）。</li>
<li>传递数据(Data on the wire)：服务器和客户端之间传递的是数据（而不是 html），由客户端进行数据的渲染。</li>
<li>无处不在的数据库(Database everywhere)：从客户机或服务器上使用相同、透明的 API 访问数据库。（在浏览器端实现了 Minimongo）</li>
<li>延迟补偿(Latency Compensation)：使用预读和模式模拟技术，使之看起来与数据库的连接是零延迟的。</li>
<li>全栈响应式(Full Stack Reactivity)：代码所依赖的数据发生变化时，结果 会自动重新计算。（并不是指响应式）</li>
<li>拥抱生态(Embrace the Ecosystem)：开源、与现有工具和框架整合，而不是取代。</li>
<li>简单等于生产力(Simplicity Equals Productivity)：让一件事看起来简单的最佳方式就是「真正」让它变得简单。</li>
</ul>
<blockquote>
<p>我的感受是使用 Meteor.js 可以在只用一种语言（JavaScript）的情况下，「超快速」地开发出一个功能完善的现代网站。</p>
</blockquote>
<h4 id="还有疑问？"><a href="#还有疑问？" class="headerlink" title="还有疑问？"></a>还有疑问？</h4><p>Take it easy.且看我后文慢慢道来…</p>
<h3 id="1-2-为什么选择-MongoDB？"><a href="#1-2-为什么选择-MongoDB？" class="headerlink" title="1.2. 为什么选择 MongoDB？"></a>1.2. 为什么选择 MongoDB？</h3><ul>
<li>首先当然是因为它是 Meteor 的默认数据库呀╮(╯▽╰)╭</li>
<li>其次作为一个 NoSQL 数据库比传统关系型数据库更加灵活，更加适用于互联网应用场景</li>
<li>我可以在爬虫运行过程中可以更加方便地修改文档结构</li>
<li>…</li>
</ul>
<h3 id="1-3-为什么是-Node-js-爬虫？"><a href="#1-3-为什么是-Node-js-爬虫？" class="headerlink" title="1.3. 为什么是 Node.js 爬虫？"></a>1.3. 为什么是 Node.js 爬虫？</h3><p>因为正好最近在学习 Node.js，还有保持项目只有一种语言。</p>
<h2 id="二、项目规范"><a href="#二、项目规范" class="headerlink" title="二、项目规范"></a>二、项目规范</h2><h3 id="2-1-命名规范"><a href="#2-1-命名规范" class="headerlink" title="2.1. 命名规范"></a>2.1. 命名规范</h3><ul>
<li>文件夹和文件采用小写字母，用下划线 _ 连接。</li>
<li>JavaScript 文件中的内容采用驼峰命名法（因为毕竟它自己就是用的驼峰╮(╯▽╰)╭）。</li>
<li>CSS 文件中的内容采用连字符 - 连接（因为本来 CSS 语法就是用连字符，如 font-family 等）。</li>
</ul>
<h3 id="2-2-文件夹规范"><a href="#2-2-文件夹规范" class="headerlink" title="2.2. 文件夹规范"></a>2.2. <a href="http://docs.meteor.com/#/full/structuringyourapp" target="_blank" rel="external">文件夹规范</a></h3><p>由于是一个全栈式框架（代码写一块儿╮(╯▽╰)╭），所以文件夹的名字十分地重要。因为会影响 Meteor 对其加载的顺序（见下文）。</p>
<p>一般来说有在顶级项目目录下有以下规范的命名：</p>
<ul>
<li>client/ : 放置所有的客户端代码，Meteor 也不会将其在服务端加载。</li>
<li>server/ : 放置所有的服务端代码，Meteor 也不会将其在客户端加载。</li>
<li>public/ : 放置静态资源，例如 favicon.ico, robots.txt 等。</li>
<li>node_modules/ : Node.js 模块代码。（比如 cz-conventional-changelog）</li>
<li>tests/ : 本地测试代码。</li>
<li>private/ : 只能被服务器端代码获取，可以通过 <a href="http://docs.meteor.com/#/full/assets" target="_blank" rel="external">Assets</a> API 读取。（不常用）</li>
<li>client/compatibility/ : 只能被服务器端代码获取，可以通过 <a href="http://docs.meteor.com/#/full/assets" target="_blank" rel="external">Assets</a> API 读取。（不常用）</li>
<li>lib/ : 放置服务端和客户端共用的代码，比如 config.js、数据库文件夹 collections/。</li>
</ul>
<h4 id="加载顺序（了解即可）"><a href="#加载顺序（了解即可）" class="headerlink" title="加载顺序（了解即可）"></a>加载顺序（了解即可）</h4><ul>
<li>应用根目录内 lib 文件夹下的文件首先加载。</li>
<li>符合 main.* 这个格式的文件最后加载。</li>
<li>子目录中的文件在母目录中的文件之前加载，即最深层子目录中的文件首先加载（在 lib 之后），根目录的文件最后加载（在 main.* 之前）。</li>
<li>同目录下的文件，按文件名的字母顺序来加载。</li>
</ul>
<h2 id="三、重要参考资料"><a href="#三、重要参考资料" class="headerlink" title="三、重要参考资料"></a>三、重要参考资料</h2><ul>
<li><a href="https://www.meteor.com/" target="_blank" rel="external">官网</a></li>
<li><a href="https://www.meteor.com/install" target="_blank" rel="external">官方快速入门教程: 学习点这</a></li>
<li><a href="https://stackoverflow.com/questions/tagged/meteor" target="_blank" rel="external">StackOverflow: 碰到问题点这</a></li>
<li><a href="https://forums.meteor.com/" target="_blank" rel="external">官方论坛</a></li>
<li><a href="https://github.com/meteor/meteor/" target="_blank" rel="external">Github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;差不多结束了在移动研究院快一年的实习，加上马上到来的寒假，想着闲着也是闲着不然做个网站练练手吧╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;于是在寒假里就捣鼓了这么个网站 &lt;a href=&quot;http://182.254.241.100&quot;&gt;Byrs-News&lt;/a&gt; | &lt;a href=&quot;https://github.com/BuptStEve/byrs-news&quot;&gt;开源地址&lt;/a&gt;，主要内容是通过爬虫 &lt;a href=&quot;https://github.com/BuptStEve/byr-crawler&quot;&gt;Byr-Crawler&lt;/a&gt; 对于北邮人论坛帖子进行定时爬取，在收集整理之后希望大家能够更加“优雅地”浏览论坛～=￣ω￣=～。&lt;/p&gt;
    
    </summary>
    
      <category term="全栈" scheme="https://buptsteve.github.io/blog/categories/%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="meteor" scheme="https://buptsteve.github.io/blog/tags/meteor/"/>
    
  </entry>
  
  <entry>
    <title>「3」前端开发利器 webpack</title>
    <link href="https://buptsteve.github.io/blog/2015/12/29/3.js-webpack/"/>
    <id>https://buptsteve.github.io/blog/2015/12/29/3.js-webpack/</id>
    <published>2015-12-29T07:12:58.000Z</published>
    <updated>2016-10-14T16:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p>在编写构建前端项目时，以下这些需求想必十分常见：</p>
<ol>
<li>html/css/js 代码的预编译：  <ul>
<li>Jade, Ejs…</li>
<li>Sass, Less, Stylus…</li>
<li>Dart, CoffeeScript, TypeScript, ES6/7…</li>
</ul>
</li>
<li>拯救你的 F5 或者 Command/Ctrl + R（即自动监听、编译并刷新浏览器）</li>
<li>发布时的代码压缩、混淆，图片的压缩和 base64 嵌入</li>
</ol>
<blockquote>
<p><strong>以上这些「体力♂活儿」显然不能自己浪费时间手动完成，所以优雅的解决方式就是：自动化构建工具～！</strong></p>
</blockquote>
<a id="more"></a>
<p>话说我最早了解到前端自动化构建工具，是通过慕课网学习的时候看到的 grunt 教程，随意浏览了点儿发现上手有点儿难 _(:зゝ∠)_ 同时也没有什么需求就没有学下去。  </p>
<p>然后学习了 less/sass/stylus 等预编译语言，先是使用了 <a href="http://koala-app.com/index-zh.html" target="_blank" rel="external">koala</a> 进行 less 文件的编译。之后又有了「拯救 F5」的需求，觉得再使用 <a href="http://livereload.com/" target="_blank" rel="external">livereload</a> 这样不够绅士(´･ω･`)。于是开始学习 gulp， gulp 是基于 Unix 的哲♂学，即</p>
<blockquote>
<p>Do one thing and do it well.  </p>
</blockquote>
<p>类似于 Unix 的管道命令（pipe：| ），gulp 基于 Node.js 中的 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">stream</a> 机制。Gulp 的每个插件从 stream 中读取输入，做一些处理，再输出到 stream 中。同时使用 <a href="https://www.npmjs.com/package/browser-sync" target="_blank" rel="external">browser-sync</a> 插件能够解决我的重复刷新的繁重劳动。</p>
<p>无奈前端变化太快_(:зゝ∠)_，使用 gulp 没多久。通过 <a href="http://cn.vuejs.org" target="_blank" rel="external">vue.js</a> 一个 MVVM 框架，知道了 webpack 这一新的前端自动化构建工具。使用 webpack 可以方便地将 <code>*.vue</code>文件编译打包到工程中，并且 react 的大部分项目也使用 webpack 进行构建。那么问题来了，webpack 究竟靠什么火起来了呢？</p>
<h2 id="一、webpack"><a href="#一、webpack" class="headerlink" title="一、webpack"></a>一、webpack</h2><h3 id="1-1-为什么选择-webpack-参考链接"><a href="#1-1-为什么选择-webpack-参考链接" class="headerlink" title="1.1. 为什么选择 webpack ? 参考链接"></a>1.1. 为什么选择 webpack ? <a href="http://webpack.github.io/docs/motivation.html" target="_blank" rel="external">参考链接</a></h3><h4 id="a-模块化"><a href="#a-模块化" class="headerlink" title="a. 模块化"></a>a. 模块化</h4><p>首先要明确：随着前端越来越「重」，项目变得越来越大，团队人数增加、功能增加地越多，势必引起出错、依赖情况的出现。那么想想服务器端、桌面大型程序等是怎么做的呢？  </p>
<p>答案只有一个：<strong>模块化开发！</strong></p>
<blockquote>
<p>然而浏览器本身并不提供模块管理的机制（ES6 终于引入 Module），为了调用各个模块，有时不得不在网页中，加入一大堆script标签。这样就使得网页体积臃肿，难以维护，还产生大量的HTTP请求，拖慢显示速度，影响用户体验。  </p>
<p>在此对于模块化就不继续展开了…Require.js/Sea.js/Common.js/AMD/CMD/ES6…etc.</p>
</blockquote>
<h4 id="b-代码传输"><a href="#b-代码传输" class="headerlink" title="b. 代码传输"></a>b. 代码传输</h4><p>明确了模块化开发这一前提之后，那么新的问题又来了…模块化之后的文件怎么从服务器传递到客户端（浏览器）？  </p>
<p><strong>有两种「极端」的方式</strong>：  </p>
<ul>
<li>每一个请求传送一个模块（类似于一堆的 <code>&lt;srcipt&gt;</code> 标签…）</li>
<li>一个请求传送所有模块（例如 browserify 的打包方式）  </li>
</ul>
<p>这两种方式方式各有优缺点：  </p>
<ol>
<li>一个请求一个模块<ul>
<li>优点：只加载需要的模块；</li>
<li>缺点：大量请求会使得启动缓慢…</li>
</ul>
</li>
<li>一个请求所有模块<ul>
<li>优点：请求数少，等待时间少；</li>
<li>缺点：不需要的模块同样被传送了…</li>
</ul>
</li>
</ol>
<p>因此，在大多数的情况下最佳实践应该是一个折中的方案：  </p>
<blockquote>
<p>在编译所有模块时，将模块细分成为多个小的 batches(chunks)，于是我们分解得到了许多请求。模块的 chunks 初始状态时并没有全部加载，只在需要的时候发起请求。因此初始请求不会包含所有的代码，显然加载的代码量更小，速度更快。  </p>
</blockquote>
<p>其中关键的「分割点」即 chunks 的划分边界，是取决于开发者并且是可选的。</p>
<h4 id="c-模块热替换（HMR）"><a href="#c-模块热替换（HMR）" class="headerlink" title="c. 模块热替换（HMR）"></a>c. 模块热替换（HMR）</h4><p>此外还有一个重要原因：webpack 支持<strong>模块热替换（HMR）</strong>（例如 <a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">react-hot-loader</a>）  </p>
<p>针对浏览器自动刷新，LiveReload 和 Browser-sync 是两款常用的工具，然而 HMR 更进了一步。我们知道 React 出现的原因之一就是<strong>积累用户在浏览器中的状态</strong>，而 HMR 能够在修改代码保存之后仍然保存之前的状态，就是俗称的「热替换」。</p>
<h3 id="1-2-怎么使用-webpack？"><a href="#1-2-怎么使用-webpack？" class="headerlink" title="1.2. 怎么使用 webpack？"></a>1.2. 怎么使用 webpack？</h3><p>了解了为什么（why）之后，接着学习怎么做（how）。</p>
<h4 id="a-webpack-的安装"><a href="#a-webpack-的安装" class="headerlink" title="a. webpack 的安装"></a>a. webpack 的安装</h4><ul>
<li>首先使用 npm 全局安装 webpack：  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) -g webpack</div></pre></td></tr></table></figure>
<ul>
<li>接着局部安装 webpack：  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) --save-dev webpack</div></pre></td></tr></table></figure>
<h4 id="b-webpack-的配置"><a href="#b-webpack-的配置" class="headerlink" title="b. webpack 的配置"></a>b. webpack 的配置</h4><ul>
<li><a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">官方文档</a></li>
<li><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="external">Pete Hunt</a>  </li>
</ul>
<p>webpack 配置的本质就是：一个配置的 Object。</p>
<p>因此有两种使用方法配置 webpack:</p>
<ul>
<li>一种是 Cli（即 Command Line Interface）方法：读取 webpack.config.js 文件；</li>
<li>另一种是 Node.js API 的方法：传递配置对象作为参数。</li>
</ul>
<p>前端一般使用第一种，即配置 webpack.config.js 文件，简单例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>就是设置入口、出口文件，炒鸡简单有木有~</p>
</blockquote>
<p>接着我们需要进行一些预编译工作，例如把 CoffeeScript 或 ES6 的代码编译为 ES5 的 JavaScript，例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [&#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.coffee$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'coffee-loader'</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'babel-loader'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>只需要加入 loader，loader 中的 test 表示哪些文件需要经过 loader 进行处理。</p>
</blockquote>
<p>对于 css 和 图片资源同样也有 loader，这样就可以像引用 js 一样在代码中引用，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./bootstrap.css'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'./myapp.less'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">img.src = <span class="built_in">require</span>(<span class="string">'./glyph.png'</span>);</div></pre></td></tr></table></figure>
<p>loader 的编写类似于之前的例子：（!用于链式操作，且从右往左执行）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./build'</span>, <span class="comment">// This is where images AND js will go</span></div><div class="line">        publicPath: <span class="string">'http://mycdn.com/'</span>, <span class="comment">// This is used to generate URLs to e.g. images</span></div><div class="line">        filename: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [&#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'style-loader!css-loader!less-loader'</span></div><div class="line">            &#125;, <span class="comment">// use ! to chain loaders</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span></div><div class="line">            &#125; <span class="comment">// inline base64 URLs for &lt;=8k images, direct URLs for the rest</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>last but not the least:  添加 webpack-dev-server 作为实时代码更新</strong><br>安装完成后只需添加两行代码到 webpack.config.js 中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...</div><div class="line">    entry: [</div><div class="line">        <span class="string">'webpack-dev-server/client?http://0.0.0.0:8080'</span>,</div><div class="line">        <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">        <span class="string">'./app/main.js'</span></div><div class="line">    ],</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>并且在 package.json 中的 scripts 添加一行代码：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"scripts"</span>: &#123;</div><div class="line">        <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --devtool eval --progress --colors --hot --content-base build"</span></div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在日常开发中只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>在浏览器中访问 <code>http://localhost:8080</code> 即可看到编译结果，并且更改代码后能够自动刷新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;在编写构建前端项目时，以下这些需求想必十分常见：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html/css/js 代码的预编译：  &lt;ul&gt;
&lt;li&gt;Jade, Ejs…&lt;/li&gt;
&lt;li&gt;Sass, Less, Stylus…&lt;/li&gt;
&lt;li&gt;Dart, CoffeeScript, TypeScript, ES6/7…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拯救你的 F5 或者 Command/Ctrl + R（即自动监听、编译并刷新浏览器）&lt;/li&gt;
&lt;li&gt;发布时的代码压缩、混淆，图片的压缩和 base64 嵌入&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以上这些「体力♂活儿」显然不能自己浪费时间手动完成，所以优雅的解决方式就是：自动化构建工具～！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://buptsteve.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="效率" scheme="https://buptsteve.github.io/blog/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="webpack" scheme="https://buptsteve.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>「2」如何搭建自己的服务器？</title>
    <link href="https://buptsteve.github.io/blog/2015/11/03/2.centos-server/"/>
    <id>https://buptsteve.github.io/blog/2015/11/03/2.centos-server/</id>
    <published>2015-11-03T05:04:58.000Z</published>
    <updated>2016-10-14T16:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、问题的由来？"><a href="#零、问题的由来？" class="headerlink" title="零、问题的由来？"></a>零、问题的由来？</h2><p>平时逛 <a href="http://bbs.byr.cn" target="_blank" rel="external">北邮人论坛</a> 看到各种大神做的各种作品，技痒难耐，也想自己捣鼓捣鼓、学习服务器。<br>正好实验室有空闲电脑，就自己搭一个玩儿啦～。<br>在纠结半天，看了好多资(si)料(bi)后，决定选用 CentOS 作为操作系统， 主要开发环境为 Python 和 Node.js。</p>
<a id="more"></a>
<h2 id="一、系统安装"><a href="#一、系统安装" class="headerlink" title="一、系统安装"></a>一、系统安装</h2><p>（怎么获取镜像就不赘述了～）</p>
<ol>
<li>利用 <a href="http://cn.ultraiso.net" target="_blank" rel="external">ultraISO</a> 将镜像文件拷入 u 盘内</li>
<li>设置 BIOS，优先从 u 盘启动</li>
<li>按照步骤安装…</li>
</ol>
<h2 id="二、网关问题"><a href="#二、网关问题" class="headerlink" title="二、网关问题"></a>二、网关问题</h2><p>由于北邮校内使用 ipv4 流量需要登录网关，下面介绍两种方法：</p>
<h3 id="2-1-VNC"><a href="#2-1-VNC" class="headerlink" title="2.1. VNC"></a>2.1. VNC</h3><p>CentOS 可以使用 tigervnc，使用 yum 即可安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install tigervnc</div><div class="line">$ yum install tigervnc-server</div></pre></td></tr></table></figure>
<p>安装完成后，使用命令<code>vncserver :n</code> 打开相应端口n<br>（这里的n是sessionnumber，不指定默认为1，也可以是2、3等等。第一次会提示输入密码，以后可以使用vncpasswd命令修改密码。）</p>
<blockquote>
<p>当然别忘了设置 iptables…<br>小白就 <code>iptables -F</code> 吧</p>
</blockquote>
<p>之后就可以从本地 vncviewer 连接啦…</p>
<h3 id="2-2-命令行（推荐）"><a href="#2-2-命令行（推荐）" class="headerlink" title="2.2. 命令行（推荐）"></a>2.2. 命令行（推荐）</h3><p>网关登录还可以使用 curl 命令：</p>
<ul>
<li>登录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-d</span> <span class="string">'DDDDD=「你的帐号」&amp;upass=「你的密码」&amp;AMKKey='</span> 10.3.8.211</div></pre></td></tr></table></figure>
<ul>
<li>注销：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl 10.3.8.211/F.htm</div></pre></td></tr></table></figure>
<ul>
<li>还可以写入命令行的 alias 中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.bashrc (这里看你具体用的啥)</div><div class="line"></div><div class="line"><span class="comment"># 添加以下 alias</span></div><div class="line"><span class="built_in">alias</span> ibu=<span class="string">'curl -d "DDDDD=「你的帐号」&amp;upass=「你的密码」&amp;AMKKey=" 10.3.8.211 &amp;&amp; clear'</span></div><div class="line"><span class="built_in">alias</span> obu=<span class="string">'curl 10.3.8.211/F.htm &amp;&amp; clear'</span></div></pre></td></tr></table></figure>
<p>这样要登录网关只需要输入 <code>ibu</code>，同理退出就是 <code>obu</code>。</p>
<h2 id="三、Python-3-环境"><a href="#三、Python-3-环境" class="headerlink" title="三、Python 3 环境"></a>三、Python 3 环境</h2><p>由于 CentOS 自带 Python 为 2.7.5 版本（最好不要卸载，因为会被 yum 使用），<br>而我日常使用 3.0+ 所以需要更新 Python 版本。下面介绍一种两个环境共存的方法（以 3.5 版本为例）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tar.xz</div></pre></td></tr></table></figure>
<ul>
<li>下载 Python 3.5.0 ，之后解压，安装…</li>
<li>C Complier问题：在上一步安装 Python3 的过程中执行 <code>./configure</code> 时报错，原来是没有 C Complier…</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install gcc</div></pre></td></tr></table></figure>
<ul>
<li>继续安装 Python3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./configure --prefix=/opt/python3</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<ul>
<li>验证是否安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /opt/python3/bin/python3 -V</div></pre></td></tr></table></figure>
<ul>
<li>重要事项！</li>
</ul>
<p>由于此种方法仍保留了原系统中的 Python2 ，因此别忘了在自己编写的 Python3 脚本中加入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/opt/python3/bin/python3</span></div></pre></td></tr></table></figure>
<p>即，选择 python3 进行解析。</p>
<h2 id="四、Node-js-环境"><a href="#四、Node-js-环境" class="headerlink" title="四、Node.js 环境"></a>四、Node.js 环境</h2><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1. 安装"></a>4.1. 安装</h3><p>推荐使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> 进行安装和版本切换。</p>
<h3 id="4-2-仓库问题"><a href="#4-2-仓库问题" class="headerlink" title="4.2. 仓库问题"></a>4.2. 仓库问题</h3><p>由于 GFW 的原因，可能使用自带 registry 会太慢或者失败，因此可以试试以下解决方案</p>
<p>推荐一个切换仓库的 npm 包 <a href="https://github.com/Pana/nrm" target="_blank" rel="external">nrm</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) -g nrm</div></pre></td></tr></table></figure>
<h4 id="nrm-使用介绍"><a href="#nrm-使用介绍" class="headerlink" title="nrm 使用介绍"></a>nrm 使用介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 列出可用仓库</div><div class="line">$ nrm ls</div><div class="line"></div><div class="line">* npm ---- https://registry.npmjs.org/</div><div class="line">  cnpm --- http://r.cnpmjs.org/</div><div class="line">  taobao - http://registry.npm.taobao.org/</div><div class="line">  eu ----- http://registry.npmjs.eu/</div><div class="line">  au ----- http://registry.npmjs.org.au/</div><div class="line">  sl ----- http://npm.strongloop.com/</div><div class="line">  nj ----- https://registry.nodejitsu.com/</div><div class="line">  pt ----- http://registry.npmjs.pt/</div><div class="line"></div><div class="line">// 切换仓库到 cnpm</div><div class="line">$ nrm use cnpm  </div><div class="line"></div><div class="line">    Registry has been <span class="built_in">set</span> to: http://r.cnpmjs.org/</div></pre></td></tr></table></figure>
<p>当然嫌麻烦可以直接用 <a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝 npm 镜像</a></p>
<h3 id="3-切换-Node-js-版本"><a href="#3-切换-Node-js-版本" class="headerlink" title="3. 切换 Node.js 版本"></a>3. 切换 Node.js 版本</h3><p>直接使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> 或者 tj 的作品 <a href="https://github.com/tj/n" target="_blank" rel="external">n</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) -g n</div></pre></td></tr></table></figure>
<h4 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 安装 0.8.14/0.8.17/0.9.6 三个版本的 nodejs</div><div class="line">$ n 0.8.14</div><div class="line">$ n 0.8.17</div><div class="line">$ n 0.9.6</div><div class="line"></div><div class="line">// 选择版本（移动上下箭头，回车或右键头选择，Ctrl+C 取消）</div><div class="line">$ n</div><div class="line">  0.8.14</div><div class="line">ο 0.8.17</div><div class="line">  0.9.6</div><div class="line"></div><div class="line">// 删除 0.9.4 版本</div><div class="line">$ n - 0.9.4</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、问题的由来？&quot;&gt;&lt;a href=&quot;#零、问题的由来？&quot; class=&quot;headerlink&quot; title=&quot;零、问题的由来？&quot;&gt;&lt;/a&gt;零、问题的由来？&lt;/h2&gt;&lt;p&gt;平时逛 &lt;a href=&quot;http://bbs.byr.cn&quot;&gt;北邮人论坛&lt;/a&gt; 看到各种大神做的各种作品，技痒难耐，也想自己捣鼓捣鼓、学习服务器。&lt;br&gt;正好实验室有空闲电脑，就自己搭一个玩儿啦～。&lt;br&gt;在纠结半天，看了好多资(si)料(bi)后，决定选用 CentOS 作为操作系统， 主要开发环境为 Python 和 Node.js。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://buptsteve.github.io/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Linux" scheme="https://buptsteve.github.io/blog/tags/Linux/"/>
    
      <category term="Server" scheme="https://buptsteve.github.io/blog/tags/Server/"/>
    
      <category term="Python" scheme="https://buptsteve.github.io/blog/tags/Python/"/>
    
      <category term="Node.js" scheme="https://buptsteve.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>「1」优雅地打开软件是怎样的体验？</title>
    <link href="https://buptsteve.github.io/blog/2015/11/01/1.the-way-to-open-software/"/>
    <id>https://buptsteve.github.io/blog/2015/11/01/1.the-way-to-open-software/</id>
    <published>2015-11-01T11:04:58.000Z</published>
    <updated>2016-10-14T15:38:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、问题的由来"><a href="#零、问题的由来" class="headerlink" title="零、问题的由来"></a>零、问题的由来</h2><p>不知道大家平时是怎么打开常用软件的：</p>
<h3 id="1-windows-用户"><a href="#1-windows-用户" class="headerlink" title="1. windows 用户"></a>1. windows 用户</h3><ul>
<li>从桌面上一堆杂乱的文件中找到快捷方式双击打开？<br><img src="/blog/imgs/post-1/mess-desktop.png" alt="mess-desktop"></li>
<li>从桌面上分类整理好的文件夹中找到快捷方式双击打开？<br><img src="/blog/imgs/post-1/desktop_dir.png" alt="desktop_dir"></li>
<li>或是更进一步地利用 <a href="http://www.stardock.com/products/fences/" target="_blank" rel="external">Fences</a> 从桌面选择？<br><img src="/blog/imgs/post-1/fences.png" alt="fences"></li>
<li>利用 <a href="http://www.voidtools.com/" target="_blank" rel="external">Everything</a> 进行文件名搜索？<br><img src="/blog/imgs/post-1/everything.png" alt="everythin"></li>
<li>win8下的 Metro，win10下的 blablabla…<br><img src="/blog/imgs/post-1/metro.jpg" alt="metro"><br><img src="/blog/imgs/post-1/win10.png" alt="win10"></li>
</ul>
<h3 id="2-OS-X-用户"><a href="#2-OS-X-用户" class="headerlink" title="2. OS X 用户"></a>2. OS X 用户</h3><a id="more"></a>
<ul>
<li>通过在 Dock 中寻找后，单击打开？<br><img src="/blog/imgs/post-1/dock.png" alt="dock"></li>
<li>通过拇指与其他三个手指合拢进入 Launchpad 后，单击打开？<br><img src="/blog/imgs/post-1/launchpad.jpg" alt="launchpad"></li>
<li>利用自带的 spotlight 或者 <a href="https://www.alfredapp.com/" target="_blank" rel="external">alfred</a> 等工具输入软件名打开？<br><img src="/blog/imgs/post-1/spotlight.png" alt="spotlight"><br><img src="/blog/imgs/post-1/alfred.jpeg" alt="alfred"></li>
<li>通过终端…<br><img src="/blog/imgs/post-1/terminal.jpg" alt="terminal"></li>
</ul>
<h3 id="3-linux-用户"><a href="#3-linux-用户" class="headerlink" title="3. linux 用户"></a>3. linux 用户</h3><ul>
<li>通过终端…</li>
<li>要啥自行车…╮(╯▽╰)╭… <del>(才不会告诉你是因为我不造呢…)</del></li>
</ul>
<h2 id="一、我的选择-私のchoice"><a href="#一、我的选择-私のchoice" class="headerlink" title="一、我的选择 (私のchoice)"></a>一、我的选择 <del>(私のchoice)</del></h2><h3 id="1-1-OS-X-下"><a href="#1-1-OS-X-下" class="headerlink" title="1.1. OS X 下"></a>1.1. OS X 下</h3><p>通过 ctrl + space 唤起 <a href="https://www.alfredapp.com/" target="_blank" rel="external">alfred</a> ，之后输入软件缩写，点击回车或 cmd + n<br>打开软件。<br>(btw 可以将 Application 中的各个 app 的名字重新命名缩写过，比如将 <code>网易云音乐</code> 缩写成 <code>wyy</code>)</p>
<p><img src="/blog/imgs/post-1/alfred.gif" alt="alfred"></p>
<h3 id="1-2-windows-下"><a href="#1-2-windows-下" class="headerlink" title="1.2. windows 下"></a>1.2. windows 下</h3><h4 id="1-2-1-自带的运行"><a href="#1-2-1-自带的运行" class="headerlink" title="1.2.1. 自带的运行"></a>1.2.1. 自带的运行</h4><p>就是那个 <code>win + r</code> ，不过为了保持与 OS X 操作的一致性利用了<a href="http://www.autohotkey.com/" target="_blank" rel="external">AutoHotkey</a> 将其统一修改为 <code>ctrl + space</code>。</p>
<p>具体的配置文件是 <a href="https://github.com/BuptStEve/useful-settings" target="_blank" rel="external">点我</a> 中的 autohotkey/steve.ahk</p>
<p><img src="/blog/imgs/post-1/win.gif" alt="win-gif"></p>
<h4 id="1-2-2-然后呢？"><a href="#1-2-2-然后呢？" class="headerlink" title="1.2.2. 然后呢？"></a>1.2.2. 然后呢？</h4><p>还需要2步设置：(居然比把大象放冰箱还少一步啊喂！)</p>
<ol>
<li>将 (桌面上或者其他地方的) 软件快捷方式改名缩写成2~3个字母</li>
<li>把该快捷方式 duang～ 地一声剪切到 <code>C:\Windows</code> 下，搞定收工～=￣ω￣=～</li>
</ol>
<blockquote>
<p>不过有的软件比如 <code>Github.appref-ms</code> 这种格式的就没办法通过以上方法快速打开了。这时候就又要推荐一个好用软件啦：<a href="http://www.irolan.com/" target="_blank" rel="external">Rolan</a>，将快捷方式或其他的文件/文件夹拖进去就ok。要使用的时候就通过快捷键呼叫出 Rolan 后即可打开。</p>
</blockquote>
<p><img src="/blog/imgs/post-1/rolan.png" alt="rolan"></p>
<h2 id="二、综上"><a href="#二、综上" class="headerlink" title="二、综上"></a>二、综上</h2><p>无论何时，无论当前层叠了多少窗口…只需要:</p>
<ol>
<li>按下 <code>Ctrl + Space</code></li>
<li>输入缩写过的 2~3 个字母的软件名称</li>
<li>按下 <code>Enter</code> 确认</li>
</ol>
<p>Duang～一下就优雅地把软件打开了~\(≧▽≦)/~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、问题的由来&quot;&gt;&lt;a href=&quot;#零、问题的由来&quot; class=&quot;headerlink&quot; title=&quot;零、问题的由来&quot;&gt;&lt;/a&gt;零、问题的由来&lt;/h2&gt;&lt;p&gt;不知道大家平时是怎么打开常用软件的：&lt;/p&gt;
&lt;h3 id=&quot;1-windows-用户&quot;&gt;&lt;a href=&quot;#1-windows-用户&quot; class=&quot;headerlink&quot; title=&quot;1. windows 用户&quot;&gt;&lt;/a&gt;1. windows 用户&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从桌面上一堆杂乱的文件中找到快捷方式双击打开？&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/mess-desktop.png&quot; alt=&quot;mess-desktop&quot;&gt;&lt;/li&gt;
&lt;li&gt;从桌面上分类整理好的文件夹中找到快捷方式双击打开？&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/desktop_dir.png&quot; alt=&quot;desktop_dir&quot;&gt;&lt;/li&gt;
&lt;li&gt;或是更进一步地利用 &lt;a href=&quot;http://www.stardock.com/products/fences/&quot;&gt;Fences&lt;/a&gt; 从桌面选择？&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/fences.png&quot; alt=&quot;fences&quot;&gt;&lt;/li&gt;
&lt;li&gt;利用 &lt;a href=&quot;http://www.voidtools.com/&quot;&gt;Everything&lt;/a&gt; 进行文件名搜索？&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/everything.png&quot; alt=&quot;everythin&quot;&gt;&lt;/li&gt;
&lt;li&gt;win8下的 Metro，win10下的 blablabla…&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/metro.jpg&quot; alt=&quot;metro&quot;&gt;&lt;br&gt;&lt;img src=&quot;/blog/imgs/post-1/win10.png&quot; alt=&quot;win10&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-OS-X-用户&quot;&gt;&lt;a href=&quot;#2-OS-X-用户&quot; class=&quot;headerlink&quot; title=&quot;2. OS X 用户&quot;&gt;&lt;/a&gt;2. OS X 用户&lt;/h3&gt;
    
    </summary>
    
      <category term="工欲善其事" scheme="https://buptsteve.github.io/blog/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B/"/>
    
    
      <category term="效率" scheme="https://buptsteve.github.io/blog/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>「0」Hello World</title>
    <link href="https://buptsteve.github.io/blog/2015/10/29/0.hello-world/"/>
    <id>https://buptsteve.github.io/blog/2015/10/29/0.hello-world/</id>
    <published>2015-10-29T11:04:58.000Z</published>
    <updated>2016-10-14T09:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、Blog的由来"><a href="#零、Blog的由来" class="headerlink" title="零、Blog的由来"></a>零、Blog的由来</h2><p>作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 <a href="http://jekyllcn.com/" target="_blank" rel="external">jekyll</a> 感觉不错，折腾了半天感觉还是不够给力。<br>最后还是选择了 <a href="https://hexo.io/" target="_blank" rel="external">hexo3</a>。</p>
<a id="more"></a>
<p>主要是这几个优点吧：</p>
<ul>
<li>免费╮(╯▽╰)╭</li>
<li>基于 Node.js</li>
<li>速度快、操作更简单、命令少，专注于写作本身</li>
<li>由于 deploy 命令，发布到 github 上生成静态站点也很简单</li>
</ul>
<p>所以整个 Blog 就是采用 <a href="https://hexo.io/" target="_blank" rel="external">hexo3</a> + <a href="https://pages.github.com/" target="_blank" rel="external">github pages</a>,主题基于 <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a> 进行修改，下面就详细说说怎么搭起来吧…</p>
<h2 id="一、hexo的安装"><a href="#一、hexo的安装" class="headerlink" title="一、hexo的安装"></a>一、hexo的安装</h2><p>首先由于 hexo 是基于 Node.js 开发的，所以我们先要安装 Node.js 环境，进入<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a>，一般会发现有两个版本：LTS 和 Stable。</p>
<p>这两个版本的区别在于一个是 LTS 长期支持版（也是推荐选项），另一个是拥有最新功能的稳定版（适合有新功能需求的尝鲜用户）。</p>
<p>安装完成后，在命令行运行以下命令（其中括号的意思是 install 可以缩写为 i）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) -g hexo</div></pre></td></tr></table></figure>
<p><em>npm 安装方式中 -g 的意思是全局安装。</em></p>
<h2 id="二、初体验"><a href="#二、初体验" class="headerlink" title="二、初体验~"></a>二、初体验~</h2><h3 id="2-1-生成项目"><a href="#2-1-生成项目" class="headerlink" title="2.1. 生成项目"></a>2.1. 生成项目</h3><p>找到一个合适的位置，创建我们的项目文件夹：</p>
<ul>
<li>一般的用户：自己图形界面新建了一个,然后点进去</li>
<li>命令行用户：<code>mkdir &lt;folder&gt; &amp;&amp; cd &lt;folder&gt;</code></li>
<li>hexo的用户：<code>hexo init &lt;folder&gt; &amp;&amp; cd &lt;folder&gt;</code></li>
</ul>
<h3 id="2-2-安装依赖"><a href="#2-2-安装依赖" class="headerlink" title="2.2. 安装依赖"></a>2.2. 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall)</div></pre></td></tr></table></figure>
<p>npm 就会自动根据 package.json 中的配置自动进行安装</p>
<h3 id="2-3-运行预览"><a href="#2-3-运行预览" class="headerlink" title="2.3. 运行预览"></a>2.3. 运行预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g(enerate)</div><div class="line">$ hexo s(erver)</div></pre></td></tr></table></figure>
<p><em>如果这步报错一般是因为没装 hexo-server，运行以下命令安装即可：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) --save  hexo-server</div></pre></td></tr></table></figure>
<blockquote>
<p>npm 安装方式中 –save 的意思是作为项目依赖(dependencies)进行安装，可以缩写为 -S (注意大写)<br>此外还有 –save-dev 的意思是作为项目的「开发」依赖(devDependencies)进行安装，可以缩写为 -D (注意大写)<br>这两种安装方式都会将这个包的名称和版本写进 package.json 配置文件中</p>
</blockquote>
<p>最后打开浏览器输入<code>http://localhost:4000</code>就可以看到页面啦～</p>
<h2 id="三、换主题（theme）"><a href="#三、换主题（theme）" class="headerlink" title="三、换主题（theme）"></a>三、换主题（theme）</h2><p>然而只是使用默认的主题（theme）怎么会有逼格→_→，果断要整一个吊炸天的主题呀~，下面以 <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a> 为例作为说明。</p>
<h3 id="3-1-下载主题"><a href="#3-1-下载主题" class="headerlink" title="3.1. 下载主题"></a>3.1. 下载主题</h3><p>首先在项目目录下（就是说有个 themes 的文件夹），执行以下命令，将主题下载到 themes 文件夹下的 indigo 文件夹中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/yscoder/hexo-theme-indigo themes/indigo</div></pre></td></tr></table></figure>
<h3 id="3-2-配置使用主题"><a href="#3-2-配置使用主题" class="headerlink" title="3.2. 配置使用主题"></a>3.2. 配置使用主题</h3><p>接着修改 _config.yml（项目的配置文件，不是主题的） 将 theme 改为 indigo</p>
<h2 id="四、部署到-github-pages"><a href="#四、部署到-github-pages" class="headerlink" title="四、部署到 github pages"></a>四、部署到 github pages</h2><h3 id="4-1-安装-hexo-deployer-git"><a href="#4-1-安装-hexo-deployer-git" class="headerlink" title="4.1. 安装 hexo-deployer-git"></a>4.1. 安装 hexo-deployer-git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="4-2-关于-github-pages"><a href="#4-2-关于-github-pages" class="headerlink" title="4.2. 关于 github pages"></a>4.2. 关于 github pages</h3><h4 id="4-2-1-分类"><a href="#4-2-1-分类" class="headerlink" title="4.2.1. 分类"></a>4.2.1. 分类</h4><h5 id="1-项目站点（Project-Pages）"><a href="#1-项目站点（Project-Pages）" class="headerlink" title="1. 项目站点（Project Pages）"></a>1. 项目站点（Project Pages）</h5><p>github 会根据 gh-pages 分支下文件生成静态页面，地址是  [yourName].github.io/[projectName]。（[yourName] 是你的账户名，[projectName] 是你的项目名）</p>
<h5 id="2-个人或公司站点（User-Organization-Pages）"><a href="#2-个人或公司站点（User-Organization-Pages）" class="headerlink" title="2. 个人或公司站点（User/Organization Pages）"></a>2. 个人或公司站点（User/Organization Pages）</h5><p>首先要创建一个叫做 [yourName].github.io 的项目，接着 github 会根据 master 分支下文件生成静态页面，地址是 [yourName].github.io/。</p>
<h4 id="4-2-2-一些坑…"><a href="#4-2-2-一些坑…" class="headerlink" title="4.2.2. 一些坑…"></a>4.2.2. 一些坑…</h4><ul>
<li>有的主题中各种静态文件路径是写死的，比如好多主题中的文件引入是针对第二类页面写死的。</li>
<li>有些主题中的 CDN 资源被墙，那就需要找到这些文件手动修改地址╮(╯▽╰)╭。</li>
</ul>
<h3 id="4-3-修改-config-yml-文件"><a href="#4-3-修改-config-yml-文件" class="headerlink" title="4.3. 修改 _config.yml 文件"></a>4.3. 修改 _config.yml 文件</h3><p><a href="htjtps://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">官方文档</a>中是这么介绍的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># You can use this:</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div><div class="line"></div><div class="line"><span class="comment"># or this:</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  message: [message]</div><div class="line">  repo:</div><div class="line">    github: &lt;repository url&gt;,[branch]</div><div class="line">    gitcafe: &lt;repository url&gt;,[branch]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* repo: Repository URL</div><div class="line">* branch: Git branch to deploy the static site to</div><div class="line">* message: Commit message. The default commit message is Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;.</div></pre></td></tr></table></figure>
<blockquote>
<p>根据 4.2. 所述，部署部分的填写也分为两种情况：</p>
</blockquote>
<h4 id="1-个人或公司站点"><a href="#1-个人或公司站点" class="headerlink" title="1. 个人或公司站点"></a>1. 个人或公司站点</h4><ul>
<li>repo：填写项目地址，例如 <code>git@github.com:BuptStEve/BuptStEve.github.io.git</code></li>
<li>branch：填写 <code>master</code></li>
</ul>
<h4 id="2-项目站点"><a href="#2-项目站点" class="headerlink" title="2. 项目站点"></a>2. 项目站点</h4><ul>
<li>repo：填写项目地址，例如 <code>git@github.com:BuptStEve/blog.git</code></li>
<li>branch：填写 <code>gh-pages</code></li>
<li>url：<a href="https://buptsteve.github.io/blog/">https://buptsteve.github.io/blog/</a> （注意最后的 /）</li>
<li>root：/blog/ （注意最后的 /）</li>
</ul>
<h3 id="4-4-开始部署"><a href="#4-4-开始部署" class="headerlink" title="4.4. 开始部署"></a>4.4. 开始部署</h3><p>首先生成站点文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<p>接着发布</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d(eploy)</div></pre></td></tr></table></figure>
<p>最后打开对应地址就可以看到自己的博客啦～=￣ω￣=～。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、Blog的由来&quot;&gt;&lt;a href=&quot;#零、Blog的由来&quot; class=&quot;headerlink&quot; title=&quot;零、Blog的由来&quot;&gt;&lt;/a&gt;零、Blog的由来&lt;/h2&gt;&lt;p&gt;作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 &lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll&lt;/a&gt; 感觉不错，折腾了半天感觉还是不够给力。&lt;br&gt;最后还是选择了 &lt;a href=&quot;https://hexo.io/&quot;&gt;hexo3&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://buptsteve.github.io/blog/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://buptsteve.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
